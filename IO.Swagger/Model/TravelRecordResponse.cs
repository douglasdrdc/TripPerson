/* 
 * Amadeus Travel Innovation Sandbox
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// TravelRecordResponse
    /// </summary>
    [DataContract]
    public partial class TravelRecordResponse :  IEquatable<TravelRecordResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TravelRecordResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TravelRecordResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TravelRecordResponse" /> class.
        /// </summary>
        /// <param name="RecordLocator">6 character identifier of this travel record on the Amadeus system. (required).</param>
        /// <param name="Header">Summarized metadata on the record that has been retrieved..</param>
        /// <param name="Messages">Functional or technical messages associated with the retrieval of this travel record..</param>
        /// <param name="Travelers">Information about each traveler who may be included as part of this travel record..</param>
        /// <param name="Reservation">Details about the itineraries that have been reserved as part of this travel record..</param>
        public TravelRecordResponse(string RecordLocator = default(string), TravelRecordHeader Header = default(TravelRecordHeader), List<Message> Messages = default(List<Message>), List<Traveler> Travelers = default(List<Traveler>), Reservation Reservation = default(Reservation))
        {
            // to ensure "RecordLocator" is required (not null)
            if (RecordLocator == null)
            {
                throw new InvalidDataException("RecordLocator is a required property for TravelRecordResponse and cannot be null");
            }
            else
            {
                this.RecordLocator = RecordLocator;
            }
            this.Header = Header;
            this.Messages = Messages;
            this.Travelers = Travelers;
            this.Reservation = Reservation;
        }
        
        /// <summary>
        /// 6 character identifier of this travel record on the Amadeus system.
        /// </summary>
        /// <value>6 character identifier of this travel record on the Amadeus system.</value>
        [DataMember(Name="record_locator", EmitDefaultValue=false)]
        public string RecordLocator { get; set; }

        /// <summary>
        /// Summarized metadata on the record that has been retrieved.
        /// </summary>
        /// <value>Summarized metadata on the record that has been retrieved.</value>
        [DataMember(Name="header", EmitDefaultValue=false)]
        public TravelRecordHeader Header { get; set; }

        /// <summary>
        /// Functional or technical messages associated with the retrieval of this travel record.
        /// </summary>
        /// <value>Functional or technical messages associated with the retrieval of this travel record.</value>
        [DataMember(Name="messages", EmitDefaultValue=false)]
        public List<Message> Messages { get; set; }

        /// <summary>
        /// Information about each traveler who may be included as part of this travel record.
        /// </summary>
        /// <value>Information about each traveler who may be included as part of this travel record.</value>
        [DataMember(Name="travelers", EmitDefaultValue=false)]
        public List<Traveler> Travelers { get; set; }

        /// <summary>
        /// Details about the itineraries that have been reserved as part of this travel record.
        /// </summary>
        /// <value>Details about the itineraries that have been reserved as part of this travel record.</value>
        [DataMember(Name="reservation", EmitDefaultValue=false)]
        public Reservation Reservation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TravelRecordResponse {\n");
            sb.Append("  RecordLocator: ").Append(RecordLocator).Append("\n");
            sb.Append("  Header: ").Append(Header).Append("\n");
            sb.Append("  Messages: ").Append(Messages).Append("\n");
            sb.Append("  Travelers: ").Append(Travelers).Append("\n");
            sb.Append("  Reservation: ").Append(Reservation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as TravelRecordResponse);
        }

        /// <summary>
        /// Returns true if TravelRecordResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of TravelRecordResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TravelRecordResponse other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.RecordLocator == other.RecordLocator ||
                    this.RecordLocator != null &&
                    this.RecordLocator.Equals(other.RecordLocator)
                ) && 
                (
                    this.Header == other.Header ||
                    this.Header != null &&
                    this.Header.Equals(other.Header)
                ) && 
                (
                    this.Messages == other.Messages ||
                    this.Messages != null &&
                    this.Messages.SequenceEqual(other.Messages)
                ) && 
                (
                    this.Travelers == other.Travelers ||
                    this.Travelers != null &&
                    this.Travelers.SequenceEqual(other.Travelers)
                ) && 
                (
                    this.Reservation == other.Reservation ||
                    this.Reservation != null &&
                    this.Reservation.Equals(other.Reservation)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.RecordLocator != null)
                    hash = hash * 59 + this.RecordLocator.GetHashCode();
                if (this.Header != null)
                    hash = hash * 59 + this.Header.GetHashCode();
                if (this.Messages != null)
                    hash = hash * 59 + this.Messages.GetHashCode();
                if (this.Travelers != null)
                    hash = hash * 59 + this.Travelers.GetHashCode();
                if (this.Reservation != null)
                    hash = hash * 59 + this.Reservation.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
