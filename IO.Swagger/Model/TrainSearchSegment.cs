/* 
 * Amadeus Travel Innovation Sandbox
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// TrainSearchSegment
    /// </summary>
    [DataContract]
    public partial class TrainSearchSegment :  IEquatable<TrainSearchSegment>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TrainSearchSegment" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TrainSearchSegment() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TrainSearchSegment" /> class.
        /// </summary>
        /// <param name="DepartsAt">The &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_8601\&quot;&gt;ISO 8601&lt;/a&gt; date-time of the train&#39;s departure in the local time zone of the departure station, in the format YYYY-MM-DDTHH:mm. (required).</param>
        /// <param name="ArrivesAt">The &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_8601\&quot;&gt;ISO 8601&lt;/a&gt; date-time of the train&#39;s arrival in the local time zone of the arrival station, in the format YYYY-MM-DDTHH:mm. (required).</param>
        /// <param name="DepartureStation">The station object representing the station at which the passenger should board this train in order to complete this part of the itinerary. (required).</param>
        /// <param name="ArrivalStation">The station object representing the station at which the passenger should disembark this train in order to complete this part of the itinerary. (required).</param>
        /// <param name="MarketingCompany">The name of the train company selling this train journey. This is the name you should see printed on your ticket. (required).</param>
        /// <param name="OperatingCompany">The name of the train company operating this train journey. This is the name you should see written on the train. (required).</param>
        /// <param name="TrainNumber">The identifying number of this train service. Usually the marketing company will only operate on train per day with this train number. (required).</param>
        /// <param name="TrainType">The type of train that you may expect for this journey. For example&amp;colon; InterCity, Regional....</param>
        /// <param name="Prices">Possible pricing for this train journey. (required).</param>
        public TrainSearchSegment(string DepartsAt = default(string), string ArrivesAt = default(string), Station DepartureStation = default(Station), Airport ArrivalStation = default(Airport), string MarketingCompany = default(string), string OperatingCompany = default(string), string TrainNumber = default(string), string TrainType = default(string), List<TrainSearchPricing> Prices = default(List<TrainSearchPricing>))
        {
            // to ensure "DepartsAt" is required (not null)
            if (DepartsAt == null)
            {
                throw new InvalidDataException("DepartsAt is a required property for TrainSearchSegment and cannot be null");
            }
            else
            {
                this.DepartsAt = DepartsAt;
            }
            // to ensure "ArrivesAt" is required (not null)
            if (ArrivesAt == null)
            {
                throw new InvalidDataException("ArrivesAt is a required property for TrainSearchSegment and cannot be null");
            }
            else
            {
                this.ArrivesAt = ArrivesAt;
            }
            // to ensure "DepartureStation" is required (not null)
            if (DepartureStation == null)
            {
                throw new InvalidDataException("DepartureStation is a required property for TrainSearchSegment and cannot be null");
            }
            else
            {
                this.DepartureStation = DepartureStation;
            }
            // to ensure "ArrivalStation" is required (not null)
            if (ArrivalStation == null)
            {
                throw new InvalidDataException("ArrivalStation is a required property for TrainSearchSegment and cannot be null");
            }
            else
            {
                this.ArrivalStation = ArrivalStation;
            }
            // to ensure "MarketingCompany" is required (not null)
            if (MarketingCompany == null)
            {
                throw new InvalidDataException("MarketingCompany is a required property for TrainSearchSegment and cannot be null");
            }
            else
            {
                this.MarketingCompany = MarketingCompany;
            }
            // to ensure "OperatingCompany" is required (not null)
            if (OperatingCompany == null)
            {
                throw new InvalidDataException("OperatingCompany is a required property for TrainSearchSegment and cannot be null");
            }
            else
            {
                this.OperatingCompany = OperatingCompany;
            }
            // to ensure "TrainNumber" is required (not null)
            if (TrainNumber == null)
            {
                throw new InvalidDataException("TrainNumber is a required property for TrainSearchSegment and cannot be null");
            }
            else
            {
                this.TrainNumber = TrainNumber;
            }
            // to ensure "Prices" is required (not null)
            if (Prices == null)
            {
                throw new InvalidDataException("Prices is a required property for TrainSearchSegment and cannot be null");
            }
            else
            {
                this.Prices = Prices;
            }
            this.TrainType = TrainType;
        }
        
        /// <summary>
        /// The &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_8601\&quot;&gt;ISO 8601&lt;/a&gt; date-time of the train&#39;s departure in the local time zone of the departure station, in the format YYYY-MM-DDTHH:mm.
        /// </summary>
        /// <value>The &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_8601\&quot;&gt;ISO 8601&lt;/a&gt; date-time of the train&#39;s departure in the local time zone of the departure station, in the format YYYY-MM-DDTHH:mm.</value>
        [DataMember(Name="departs_at", EmitDefaultValue=false)]
        public string DepartsAt { get; set; }

        /// <summary>
        /// The &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_8601\&quot;&gt;ISO 8601&lt;/a&gt; date-time of the train&#39;s arrival in the local time zone of the arrival station, in the format YYYY-MM-DDTHH:mm.
        /// </summary>
        /// <value>The &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_8601\&quot;&gt;ISO 8601&lt;/a&gt; date-time of the train&#39;s arrival in the local time zone of the arrival station, in the format YYYY-MM-DDTHH:mm.</value>
        [DataMember(Name="arrives_at", EmitDefaultValue=false)]
        public string ArrivesAt { get; set; }

        /// <summary>
        /// The station object representing the station at which the passenger should board this train in order to complete this part of the itinerary.
        /// </summary>
        /// <value>The station object representing the station at which the passenger should board this train in order to complete this part of the itinerary.</value>
        [DataMember(Name="departure_station", EmitDefaultValue=false)]
        public Station DepartureStation { get; set; }

        /// <summary>
        /// The station object representing the station at which the passenger should disembark this train in order to complete this part of the itinerary.
        /// </summary>
        /// <value>The station object representing the station at which the passenger should disembark this train in order to complete this part of the itinerary.</value>
        [DataMember(Name="arrival_station", EmitDefaultValue=false)]
        public Airport ArrivalStation { get; set; }

        /// <summary>
        /// The name of the train company selling this train journey. This is the name you should see printed on your ticket.
        /// </summary>
        /// <value>The name of the train company selling this train journey. This is the name you should see printed on your ticket.</value>
        [DataMember(Name="marketing_company", EmitDefaultValue=false)]
        public string MarketingCompany { get; set; }

        /// <summary>
        /// The name of the train company operating this train journey. This is the name you should see written on the train.
        /// </summary>
        /// <value>The name of the train company operating this train journey. This is the name you should see written on the train.</value>
        [DataMember(Name="operating_company", EmitDefaultValue=false)]
        public string OperatingCompany { get; set; }

        /// <summary>
        /// The identifying number of this train service. Usually the marketing company will only operate on train per day with this train number.
        /// </summary>
        /// <value>The identifying number of this train service. Usually the marketing company will only operate on train per day with this train number.</value>
        [DataMember(Name="train_number", EmitDefaultValue=false)]
        public string TrainNumber { get; set; }

        /// <summary>
        /// The type of train that you may expect for this journey. For example&amp;colon; InterCity, Regional...
        /// </summary>
        /// <value>The type of train that you may expect for this journey. For example&amp;colon; InterCity, Regional...</value>
        [DataMember(Name="train_type", EmitDefaultValue=false)]
        public string TrainType { get; set; }

        /// <summary>
        /// Possible pricing for this train journey.
        /// </summary>
        /// <value>Possible pricing for this train journey.</value>
        [DataMember(Name="prices", EmitDefaultValue=false)]
        public List<TrainSearchPricing> Prices { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TrainSearchSegment {\n");
            sb.Append("  DepartsAt: ").Append(DepartsAt).Append("\n");
            sb.Append("  ArrivesAt: ").Append(ArrivesAt).Append("\n");
            sb.Append("  DepartureStation: ").Append(DepartureStation).Append("\n");
            sb.Append("  ArrivalStation: ").Append(ArrivalStation).Append("\n");
            sb.Append("  MarketingCompany: ").Append(MarketingCompany).Append("\n");
            sb.Append("  OperatingCompany: ").Append(OperatingCompany).Append("\n");
            sb.Append("  TrainNumber: ").Append(TrainNumber).Append("\n");
            sb.Append("  TrainType: ").Append(TrainType).Append("\n");
            sb.Append("  Prices: ").Append(Prices).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as TrainSearchSegment);
        }

        /// <summary>
        /// Returns true if TrainSearchSegment instances are equal
        /// </summary>
        /// <param name="other">Instance of TrainSearchSegment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TrainSearchSegment other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.DepartsAt == other.DepartsAt ||
                    this.DepartsAt != null &&
                    this.DepartsAt.Equals(other.DepartsAt)
                ) && 
                (
                    this.ArrivesAt == other.ArrivesAt ||
                    this.ArrivesAt != null &&
                    this.ArrivesAt.Equals(other.ArrivesAt)
                ) && 
                (
                    this.DepartureStation == other.DepartureStation ||
                    this.DepartureStation != null &&
                    this.DepartureStation.Equals(other.DepartureStation)
                ) && 
                (
                    this.ArrivalStation == other.ArrivalStation ||
                    this.ArrivalStation != null &&
                    this.ArrivalStation.Equals(other.ArrivalStation)
                ) && 
                (
                    this.MarketingCompany == other.MarketingCompany ||
                    this.MarketingCompany != null &&
                    this.MarketingCompany.Equals(other.MarketingCompany)
                ) && 
                (
                    this.OperatingCompany == other.OperatingCompany ||
                    this.OperatingCompany != null &&
                    this.OperatingCompany.Equals(other.OperatingCompany)
                ) && 
                (
                    this.TrainNumber == other.TrainNumber ||
                    this.TrainNumber != null &&
                    this.TrainNumber.Equals(other.TrainNumber)
                ) && 
                (
                    this.TrainType == other.TrainType ||
                    this.TrainType != null &&
                    this.TrainType.Equals(other.TrainType)
                ) && 
                (
                    this.Prices == other.Prices ||
                    this.Prices != null &&
                    this.Prices.SequenceEqual(other.Prices)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.DepartsAt != null)
                    hash = hash * 59 + this.DepartsAt.GetHashCode();
                if (this.ArrivesAt != null)
                    hash = hash * 59 + this.ArrivesAt.GetHashCode();
                if (this.DepartureStation != null)
                    hash = hash * 59 + this.DepartureStation.GetHashCode();
                if (this.ArrivalStation != null)
                    hash = hash * 59 + this.ArrivalStation.GetHashCode();
                if (this.MarketingCompany != null)
                    hash = hash * 59 + this.MarketingCompany.GetHashCode();
                if (this.OperatingCompany != null)
                    hash = hash * 59 + this.OperatingCompany.GetHashCode();
                if (this.TrainNumber != null)
                    hash = hash * 59 + this.TrainNumber.GetHashCode();
                if (this.TrainType != null)
                    hash = hash * 59 + this.TrainType.GetHashCode();
                if (this.Prices != null)
                    hash = hash * 59 + this.Prices.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
