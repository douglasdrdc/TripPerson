/* 
 * Amadeus Travel Innovation Sandbox
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// The flight itineraries with a ticket or transitional stored ticket (TST) in this reservation, and their prices.
    /// </summary>
    [DataContract]
    public partial class FlightTicket :  IEquatable<FlightTicket>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FlightTicket" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FlightTicket() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FlightTicket" /> class.
        /// </summary>
        /// <param name="Id">Uniquely identifies this ticket in this travel record. This ID is persistent, and remains the same for the lifetime of the travel record. (required).</param>
        /// <param name="Price">The cost of this ticket. (required).</param>
        /// <param name="TravelerIds">Traveler identifiers to indicate the travelers to whom this ticket applies. (required).</param>
        /// <param name="FlightBounds">The flight itinerary for this ticket. (required).</param>
        public FlightTicket(string Id = default(string), Amount Price = default(Amount), List<string> TravelerIds = default(List<string>), List<FlightReservationBound> FlightBounds = default(List<FlightReservationBound>))
        {
            // to ensure "Id" is required (not null)
            if (Id == null)
            {
                throw new InvalidDataException("Id is a required property for FlightTicket and cannot be null");
            }
            else
            {
                this.Id = Id;
            }
            // to ensure "Price" is required (not null)
            if (Price == null)
            {
                throw new InvalidDataException("Price is a required property for FlightTicket and cannot be null");
            }
            else
            {
                this.Price = Price;
            }
            // to ensure "TravelerIds" is required (not null)
            if (TravelerIds == null)
            {
                throw new InvalidDataException("TravelerIds is a required property for FlightTicket and cannot be null");
            }
            else
            {
                this.TravelerIds = TravelerIds;
            }
            // to ensure "FlightBounds" is required (not null)
            if (FlightBounds == null)
            {
                throw new InvalidDataException("FlightBounds is a required property for FlightTicket and cannot be null");
            }
            else
            {
                this.FlightBounds = FlightBounds;
            }
        }
        
        /// <summary>
        /// Uniquely identifies this ticket in this travel record. This ID is persistent, and remains the same for the lifetime of the travel record.
        /// </summary>
        /// <value>Uniquely identifies this ticket in this travel record. This ID is persistent, and remains the same for the lifetime of the travel record.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The cost of this ticket.
        /// </summary>
        /// <value>The cost of this ticket.</value>
        [DataMember(Name="price", EmitDefaultValue=false)]
        public Amount Price { get; set; }

        /// <summary>
        /// Traveler identifiers to indicate the travelers to whom this ticket applies.
        /// </summary>
        /// <value>Traveler identifiers to indicate the travelers to whom this ticket applies.</value>
        [DataMember(Name="traveler_ids", EmitDefaultValue=false)]
        public List<string> TravelerIds { get; set; }

        /// <summary>
        /// The flight itinerary for this ticket.
        /// </summary>
        /// <value>The flight itinerary for this ticket.</value>
        [DataMember(Name="flight_bounds", EmitDefaultValue=false)]
        public List<FlightReservationBound> FlightBounds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FlightTicket {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  TravelerIds: ").Append(TravelerIds).Append("\n");
            sb.Append("  FlightBounds: ").Append(FlightBounds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as FlightTicket);
        }

        /// <summary>
        /// Returns true if FlightTicket instances are equal
        /// </summary>
        /// <param name="other">Instance of FlightTicket to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FlightTicket other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Price == other.Price ||
                    this.Price != null &&
                    this.Price.Equals(other.Price)
                ) && 
                (
                    this.TravelerIds == other.TravelerIds ||
                    this.TravelerIds != null &&
                    this.TravelerIds.SequenceEqual(other.TravelerIds)
                ) && 
                (
                    this.FlightBounds == other.FlightBounds ||
                    this.FlightBounds != null &&
                    this.FlightBounds.SequenceEqual(other.FlightBounds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.Price != null)
                    hash = hash * 59 + this.Price.GetHashCode();
                if (this.TravelerIds != null)
                    hash = hash * 59 + this.TravelerIds.GetHashCode();
                if (this.FlightBounds != null)
                    hash = hash * 59 + this.FlightBounds.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
