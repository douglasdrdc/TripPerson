/* 
 * Amadeus Travel Innovation Sandbox
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// PointOfInterestDetails
    /// </summary>
    [DataContract]
    public partial class PointOfInterestDetails :  IEquatable<PointOfInterestDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PointOfInterestDetails" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PointOfInterestDetails() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PointOfInterestDetails" /> class.
        /// </summary>
        /// <param name="ShortDescription">A summary of the given point (required).</param>
        /// <param name="Description">A paragraph describing this point of interest (required).</param>
        /// <param name="WikiPageLink">A link to this point of interest&amp;quot;s wikipedia page (required).</param>
        public PointOfInterestDetails(string ShortDescription = default(string), string Description = default(string), string WikiPageLink = default(string))
        {
            // to ensure "ShortDescription" is required (not null)
            if (ShortDescription == null)
            {
                throw new InvalidDataException("ShortDescription is a required property for PointOfInterestDetails and cannot be null");
            }
            else
            {
                this.ShortDescription = ShortDescription;
            }
            // to ensure "Description" is required (not null)
            if (Description == null)
            {
                throw new InvalidDataException("Description is a required property for PointOfInterestDetails and cannot be null");
            }
            else
            {
                this.Description = Description;
            }
            // to ensure "WikiPageLink" is required (not null)
            if (WikiPageLink == null)
            {
                throw new InvalidDataException("WikiPageLink is a required property for PointOfInterestDetails and cannot be null");
            }
            else
            {
                this.WikiPageLink = WikiPageLink;
            }
        }
        
        /// <summary>
        /// A summary of the given point
        /// </summary>
        /// <value>A summary of the given point</value>
        [DataMember(Name="short_description", EmitDefaultValue=false)]
        public string ShortDescription { get; set; }

        /// <summary>
        /// A paragraph describing this point of interest
        /// </summary>
        /// <value>A paragraph describing this point of interest</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// A link to this point of interest&amp;quot;s wikipedia page
        /// </summary>
        /// <value>A link to this point of interest&amp;quot;s wikipedia page</value>
        [DataMember(Name="wiki_page_link", EmitDefaultValue=false)]
        public string WikiPageLink { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PointOfInterestDetails {\n");
            sb.Append("  ShortDescription: ").Append(ShortDescription).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  WikiPageLink: ").Append(WikiPageLink).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as PointOfInterestDetails);
        }

        /// <summary>
        /// Returns true if PointOfInterestDetails instances are equal
        /// </summary>
        /// <param name="other">Instance of PointOfInterestDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PointOfInterestDetails other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ShortDescription == other.ShortDescription ||
                    this.ShortDescription != null &&
                    this.ShortDescription.Equals(other.ShortDescription)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.WikiPageLink == other.WikiPageLink ||
                    this.WikiPageLink != null &&
                    this.WikiPageLink.Equals(other.WikiPageLink)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ShortDescription != null)
                    hash = hash * 59 + this.ShortDescription.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.WikiPageLink != null)
                    hash = hash * 59 + this.WikiPageLink.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
