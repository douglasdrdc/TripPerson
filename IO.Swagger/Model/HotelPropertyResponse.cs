/* 
 * Amadeus Travel Innovation Sandbox
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// HotelPropertyResponse
    /// </summary>
    [DataContract]
    public partial class HotelPropertyResponse :  IEquatable<HotelPropertyResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HotelPropertyResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected HotelPropertyResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="HotelPropertyResponse" /> class.
        /// </summary>
        /// <param name="PropertyCode">The 8 character property code of this given hotel. The first 2 characters of this code are the chain code that can be specified in the input. The remaining elements are proprietary to each hotel chain. (required).</param>
        /// <param name="PropertyName">The name of this hotel. (required).</param>
        /// <param name="Location">Location (required).</param>
        /// <param name="Address">Address.</param>
        /// <param name="TotalPrice">The lowest price of a stay, from the given check in date to the given check out date. (required).</param>
        /// <param name="MinDailyRate">The lowest price per day that the hotel offers between the given check-in and check-out dates. Extra taxes may apply to this rate. (required).</param>
        /// <param name="Contacts">An array of contact objects to tell the user how to contact the hotel. Typically includes a phone and fax number.</param>
        /// <param name="Amenities">An array of amenity objects to the user what facilities this hotel might provide, such as a pool or parking.  If this array is empty, it does not necessarily mean that there are no amenities available at this hotel, it could also mean that the hotel does not list their amenities in our search! .</param>
        /// <param name="Awards">An array of hotel award objects to give the user an expectation of the service quality at this hotel. This can be used to indicate, for example, the star rating of a hotel. If this array is empty, it does not necessarily mean that the hotel has no awards, it could simply mean that they didn&#39;t tell us about them!.</param>
        /// <param name="Images">A selection of image objects, showing pictures of the hotel building, the entrance or some rooms, to give an indication of what to expect at this hotel. Note that redistribution of images outside Amadeus products requires licensing from our image providers: Leonardo and Ice Portal. Thus image links are returned for whitelisted Amadeus users only..</param>
        /// <param name="Rooms">Information on currently available rooms at this hotel..</param>
        /// <param name="MoreRoomsAtThisHotel">Provides a ready-to-use link to make a follow up request to find more available rooms at this hotel.</param>
        public HotelPropertyResponse(string PropertyCode = default(string), string PropertyName = default(string), Geolocation Location = default(Geolocation), Address Address = default(Address), Amount TotalPrice = default(Amount), Amount MinDailyRate = default(Amount), List<Contact> Contacts = default(List<Contact>), List<Amenity> Amenities = default(List<Amenity>), List<Award> Awards = default(List<Award>), List<Image> Images = default(List<Image>), List<HotelRoom> Rooms = default(List<HotelRoom>), Link MoreRoomsAtThisHotel = default(Link))
        {
            // to ensure "PropertyCode" is required (not null)
            if (PropertyCode == null)
            {
                throw new InvalidDataException("PropertyCode is a required property for HotelPropertyResponse and cannot be null");
            }
            else
            {
                this.PropertyCode = PropertyCode;
            }
            // to ensure "PropertyName" is required (not null)
            if (PropertyName == null)
            {
                throw new InvalidDataException("PropertyName is a required property for HotelPropertyResponse and cannot be null");
            }
            else
            {
                this.PropertyName = PropertyName;
            }
            // to ensure "Location" is required (not null)
            if (Location == null)
            {
                throw new InvalidDataException("Location is a required property for HotelPropertyResponse and cannot be null");
            }
            else
            {
                this.Location = Location;
            }
            // to ensure "TotalPrice" is required (not null)
            if (TotalPrice == null)
            {
                throw new InvalidDataException("TotalPrice is a required property for HotelPropertyResponse and cannot be null");
            }
            else
            {
                this.TotalPrice = TotalPrice;
            }
            // to ensure "MinDailyRate" is required (not null)
            if (MinDailyRate == null)
            {
                throw new InvalidDataException("MinDailyRate is a required property for HotelPropertyResponse and cannot be null");
            }
            else
            {
                this.MinDailyRate = MinDailyRate;
            }
            this.Address = Address;
            this.Contacts = Contacts;
            this.Amenities = Amenities;
            this.Awards = Awards;
            this.Images = Images;
            this.Rooms = Rooms;
            this.MoreRoomsAtThisHotel = MoreRoomsAtThisHotel;
        }
        
        /// <summary>
        /// The 8 character property code of this given hotel. The first 2 characters of this code are the chain code that can be specified in the input. The remaining elements are proprietary to each hotel chain.
        /// </summary>
        /// <value>The 8 character property code of this given hotel. The first 2 characters of this code are the chain code that can be specified in the input. The remaining elements are proprietary to each hotel chain.</value>
        [DataMember(Name="property_code", EmitDefaultValue=false)]
        public string PropertyCode { get; set; }

        /// <summary>
        /// The name of this hotel.
        /// </summary>
        /// <value>The name of this hotel.</value>
        [DataMember(Name="property_name", EmitDefaultValue=false)]
        public string PropertyName { get; set; }

        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [DataMember(Name="location", EmitDefaultValue=false)]
        public Geolocation Location { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name="address", EmitDefaultValue=false)]
        public Address Address { get; set; }

        /// <summary>
        /// The lowest price of a stay, from the given check in date to the given check out date.
        /// </summary>
        /// <value>The lowest price of a stay, from the given check in date to the given check out date.</value>
        [DataMember(Name="total_price", EmitDefaultValue=false)]
        public Amount TotalPrice { get; set; }

        /// <summary>
        /// The lowest price per day that the hotel offers between the given check-in and check-out dates. Extra taxes may apply to this rate.
        /// </summary>
        /// <value>The lowest price per day that the hotel offers between the given check-in and check-out dates. Extra taxes may apply to this rate.</value>
        [DataMember(Name="min_daily_rate", EmitDefaultValue=false)]
        public Amount MinDailyRate { get; set; }

        /// <summary>
        /// An array of contact objects to tell the user how to contact the hotel. Typically includes a phone and fax number
        /// </summary>
        /// <value>An array of contact objects to tell the user how to contact the hotel. Typically includes a phone and fax number</value>
        [DataMember(Name="contacts", EmitDefaultValue=false)]
        public List<Contact> Contacts { get; set; }

        /// <summary>
        /// An array of amenity objects to the user what facilities this hotel might provide, such as a pool or parking.  If this array is empty, it does not necessarily mean that there are no amenities available at this hotel, it could also mean that the hotel does not list their amenities in our search! 
        /// </summary>
        /// <value>An array of amenity objects to the user what facilities this hotel might provide, such as a pool or parking.  If this array is empty, it does not necessarily mean that there are no amenities available at this hotel, it could also mean that the hotel does not list their amenities in our search! </value>
        [DataMember(Name="amenities", EmitDefaultValue=false)]
        public List<Amenity> Amenities { get; set; }

        /// <summary>
        /// An array of hotel award objects to give the user an expectation of the service quality at this hotel. This can be used to indicate, for example, the star rating of a hotel. If this array is empty, it does not necessarily mean that the hotel has no awards, it could simply mean that they didn&#39;t tell us about them!
        /// </summary>
        /// <value>An array of hotel award objects to give the user an expectation of the service quality at this hotel. This can be used to indicate, for example, the star rating of a hotel. If this array is empty, it does not necessarily mean that the hotel has no awards, it could simply mean that they didn&#39;t tell us about them!</value>
        [DataMember(Name="awards", EmitDefaultValue=false)]
        public List<Award> Awards { get; set; }

        /// <summary>
        /// A selection of image objects, showing pictures of the hotel building, the entrance or some rooms, to give an indication of what to expect at this hotel. Note that redistribution of images outside Amadeus products requires licensing from our image providers: Leonardo and Ice Portal. Thus image links are returned for whitelisted Amadeus users only.
        /// </summary>
        /// <value>A selection of image objects, showing pictures of the hotel building, the entrance or some rooms, to give an indication of what to expect at this hotel. Note that redistribution of images outside Amadeus products requires licensing from our image providers: Leonardo and Ice Portal. Thus image links are returned for whitelisted Amadeus users only.</value>
        [DataMember(Name="images", EmitDefaultValue=false)]
        public List<Image> Images { get; set; }

        /// <summary>
        /// Information on currently available rooms at this hotel.
        /// </summary>
        /// <value>Information on currently available rooms at this hotel.</value>
        [DataMember(Name="rooms", EmitDefaultValue=false)]
        public List<HotelRoom> Rooms { get; set; }

        /// <summary>
        /// Provides a ready-to-use link to make a follow up request to find more available rooms at this hotel
        /// </summary>
        /// <value>Provides a ready-to-use link to make a follow up request to find more available rooms at this hotel</value>
        [DataMember(Name="more_rooms_at_this_hotel", EmitDefaultValue=false)]
        public Link MoreRoomsAtThisHotel { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HotelPropertyResponse {\n");
            sb.Append("  PropertyCode: ").Append(PropertyCode).Append("\n");
            sb.Append("  PropertyName: ").Append(PropertyName).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  TotalPrice: ").Append(TotalPrice).Append("\n");
            sb.Append("  MinDailyRate: ").Append(MinDailyRate).Append("\n");
            sb.Append("  Contacts: ").Append(Contacts).Append("\n");
            sb.Append("  Amenities: ").Append(Amenities).Append("\n");
            sb.Append("  Awards: ").Append(Awards).Append("\n");
            sb.Append("  Images: ").Append(Images).Append("\n");
            sb.Append("  Rooms: ").Append(Rooms).Append("\n");
            sb.Append("  MoreRoomsAtThisHotel: ").Append(MoreRoomsAtThisHotel).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as HotelPropertyResponse);
        }

        /// <summary>
        /// Returns true if HotelPropertyResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of HotelPropertyResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HotelPropertyResponse other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.PropertyCode == other.PropertyCode ||
                    this.PropertyCode != null &&
                    this.PropertyCode.Equals(other.PropertyCode)
                ) && 
                (
                    this.PropertyName == other.PropertyName ||
                    this.PropertyName != null &&
                    this.PropertyName.Equals(other.PropertyName)
                ) && 
                (
                    this.Location == other.Location ||
                    this.Location != null &&
                    this.Location.Equals(other.Location)
                ) && 
                (
                    this.Address == other.Address ||
                    this.Address != null &&
                    this.Address.Equals(other.Address)
                ) && 
                (
                    this.TotalPrice == other.TotalPrice ||
                    this.TotalPrice != null &&
                    this.TotalPrice.Equals(other.TotalPrice)
                ) && 
                (
                    this.MinDailyRate == other.MinDailyRate ||
                    this.MinDailyRate != null &&
                    this.MinDailyRate.Equals(other.MinDailyRate)
                ) && 
                (
                    this.Contacts == other.Contacts ||
                    this.Contacts != null &&
                    this.Contacts.SequenceEqual(other.Contacts)
                ) && 
                (
                    this.Amenities == other.Amenities ||
                    this.Amenities != null &&
                    this.Amenities.SequenceEqual(other.Amenities)
                ) && 
                (
                    this.Awards == other.Awards ||
                    this.Awards != null &&
                    this.Awards.SequenceEqual(other.Awards)
                ) && 
                (
                    this.Images == other.Images ||
                    this.Images != null &&
                    this.Images.SequenceEqual(other.Images)
                ) && 
                (
                    this.Rooms == other.Rooms ||
                    this.Rooms != null &&
                    this.Rooms.SequenceEqual(other.Rooms)
                ) && 
                (
                    this.MoreRoomsAtThisHotel == other.MoreRoomsAtThisHotel ||
                    this.MoreRoomsAtThisHotel != null &&
                    this.MoreRoomsAtThisHotel.Equals(other.MoreRoomsAtThisHotel)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.PropertyCode != null)
                    hash = hash * 59 + this.PropertyCode.GetHashCode();
                if (this.PropertyName != null)
                    hash = hash * 59 + this.PropertyName.GetHashCode();
                if (this.Location != null)
                    hash = hash * 59 + this.Location.GetHashCode();
                if (this.Address != null)
                    hash = hash * 59 + this.Address.GetHashCode();
                if (this.TotalPrice != null)
                    hash = hash * 59 + this.TotalPrice.GetHashCode();
                if (this.MinDailyRate != null)
                    hash = hash * 59 + this.MinDailyRate.GetHashCode();
                if (this.Contacts != null)
                    hash = hash * 59 + this.Contacts.GetHashCode();
                if (this.Amenities != null)
                    hash = hash * 59 + this.Amenities.GetHashCode();
                if (this.Awards != null)
                    hash = hash * 59 + this.Awards.GetHashCode();
                if (this.Images != null)
                    hash = hash * 59 + this.Images.GetHashCode();
                if (this.Rooms != null)
                    hash = hash * 59 + this.Rooms.GetHashCode();
                if (this.MoreRoomsAtThisHotel != null)
                    hash = hash * 59 + this.MoreRoomsAtThisHotel.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
