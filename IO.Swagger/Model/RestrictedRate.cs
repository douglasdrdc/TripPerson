/* 
 * Amadeus Travel Innovation Sandbox
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// RestrictedRate
    /// </summary>
    [DataContract]
    public partial class RestrictedRate :  IEquatable<RestrictedRate>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RestrictedRate" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RestrictedRate() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RestrictedRate" /> class.
        /// </summary>
        /// <param name="RateCode">The unique identifier of this rate. (required).</param>
        /// <param name="RateName">The name used by the company to describe this rate. (required).</param>
        /// <param name="Restrictions">An enumeration of the type of restrictions associated with this rate. (required).</param>
        public RestrictedRate(string RateCode = default(string), string RateName = default(string), string Restrictions = default(string))
        {
            // to ensure "RateCode" is required (not null)
            if (RateCode == null)
            {
                throw new InvalidDataException("RateCode is a required property for RestrictedRate and cannot be null");
            }
            else
            {
                this.RateCode = RateCode;
            }
            // to ensure "RateName" is required (not null)
            if (RateName == null)
            {
                throw new InvalidDataException("RateName is a required property for RestrictedRate and cannot be null");
            }
            else
            {
                this.RateName = RateName;
            }
            // to ensure "Restrictions" is required (not null)
            if (Restrictions == null)
            {
                throw new InvalidDataException("Restrictions is a required property for RestrictedRate and cannot be null");
            }
            else
            {
                this.Restrictions = Restrictions;
            }
        }
        
        /// <summary>
        /// The unique identifier of this rate.
        /// </summary>
        /// <value>The unique identifier of this rate.</value>
        [DataMember(Name="rate_code", EmitDefaultValue=false)]
        public string RateCode { get; set; }

        /// <summary>
        /// The name used by the company to describe this rate.
        /// </summary>
        /// <value>The name used by the company to describe this rate.</value>
        [DataMember(Name="rate_name", EmitDefaultValue=false)]
        public string RateName { get; set; }

        /// <summary>
        /// An enumeration of the type of restrictions associated with this rate.
        /// </summary>
        /// <value>An enumeration of the type of restrictions associated with this rate.</value>
        [DataMember(Name="restrictions", EmitDefaultValue=false)]
        public string Restrictions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RestrictedRate {\n");
            sb.Append("  RateCode: ").Append(RateCode).Append("\n");
            sb.Append("  RateName: ").Append(RateName).Append("\n");
            sb.Append("  Restrictions: ").Append(Restrictions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as RestrictedRate);
        }

        /// <summary>
        /// Returns true if RestrictedRate instances are equal
        /// </summary>
        /// <param name="other">Instance of RestrictedRate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RestrictedRate other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.RateCode == other.RateCode ||
                    this.RateCode != null &&
                    this.RateCode.Equals(other.RateCode)
                ) && 
                (
                    this.RateName == other.RateName ||
                    this.RateName != null &&
                    this.RateName.Equals(other.RateName)
                ) && 
                (
                    this.Restrictions == other.Restrictions ||
                    this.Restrictions != null &&
                    this.Restrictions.Equals(other.Restrictions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.RateCode != null)
                    hash = hash * 59 + this.RateCode.GetHashCode();
                if (this.RateName != null)
                    hash = hash * 59 + this.RateName.GetHashCode();
                if (this.Restrictions != null)
                    hash = hash * 59 + this.Restrictions.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
