/* 
 * Amadeus Travel Innovation Sandbox
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ExtremeSearchResult
    /// </summary>
    [DataContract]
    public partial class ExtremeSearchResult :  IEquatable<ExtremeSearchResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExtremeSearchResult" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ExtremeSearchResult() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ExtremeSearchResult" /> class.
        /// </summary>
        /// <param name="Destination">The &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/International_Air_Transport_Association_airport_code\&quot;&gt;IATA code&lt;/a&gt; of the city or airport to which the traveler may go, from the provided origin (required).</param>
        /// <param name="DepartureDate">The date departure at the origin, in &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_8601\&quot;&gt;ISO 8601&lt;/a&gt; date format yyyy-MM-dd, to go to the above destination.</param>
        /// <param name="ReturnDate">The date at which the flight from the destination to the origin will depart from the destination. The date is in &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_8601\&quot;&gt;ISO 8601&lt;/a&gt; date format yyyy-MM-dd, in the local date of the origin. This field will not be present in the response if the one-way request parameter is set to true..</param>
        /// <param name="Price">The minimum total price for one adult passenger for a round trip from the origin to the destination and back. Always a string, formatted correctly for the provided currency (required).</param>
        /// <param name="Airline">The 2 character alphanumeric &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/Airline_codes\&quot;&gt;IATA airline code&lt;/a&gt; of the airline that is responsible for selling the traveler this flight - also known as the Validating Carrier. Airlines are specified using &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/Airline_codes\&quot;&gt;&lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/Airline_codes\&quot;&gt;IATA airline code&lt;/a&gt;s&lt;/a&gt;.</param>
        public ExtremeSearchResult(string Destination = default(string), DateTime? DepartureDate = default(DateTime?), DateTime? ReturnDate = default(DateTime?), string Price = default(string), string Airline = default(string))
        {
            // to ensure "Destination" is required (not null)
            if (Destination == null)
            {
                throw new InvalidDataException("Destination is a required property for ExtremeSearchResult and cannot be null");
            }
            else
            {
                this.Destination = Destination;
            }
            // to ensure "Price" is required (not null)
            if (Price == null)
            {
                throw new InvalidDataException("Price is a required property for ExtremeSearchResult and cannot be null");
            }
            else
            {
                this.Price = Price;
            }
            this.DepartureDate = DepartureDate;
            this.ReturnDate = ReturnDate;
            this.Airline = Airline;
        }
        
        /// <summary>
        /// The &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/International_Air_Transport_Association_airport_code\&quot;&gt;IATA code&lt;/a&gt; of the city or airport to which the traveler may go, from the provided origin
        /// </summary>
        /// <value>The &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/International_Air_Transport_Association_airport_code\&quot;&gt;IATA code&lt;/a&gt; of the city or airport to which the traveler may go, from the provided origin</value>
        [DataMember(Name="destination", EmitDefaultValue=false)]
        public string Destination { get; set; }

        /// <summary>
        /// The date departure at the origin, in &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_8601\&quot;&gt;ISO 8601&lt;/a&gt; date format yyyy-MM-dd, to go to the above destination
        /// </summary>
        /// <value>The date departure at the origin, in &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_8601\&quot;&gt;ISO 8601&lt;/a&gt; date format yyyy-MM-dd, to go to the above destination</value>
        [DataMember(Name="departure_date", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? DepartureDate { get; set; }

        /// <summary>
        /// The date at which the flight from the destination to the origin will depart from the destination. The date is in &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_8601\&quot;&gt;ISO 8601&lt;/a&gt; date format yyyy-MM-dd, in the local date of the origin. This field will not be present in the response if the one-way request parameter is set to true.
        /// </summary>
        /// <value>The date at which the flight from the destination to the origin will depart from the destination. The date is in &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_8601\&quot;&gt;ISO 8601&lt;/a&gt; date format yyyy-MM-dd, in the local date of the origin. This field will not be present in the response if the one-way request parameter is set to true.</value>
        [DataMember(Name="return_date", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? ReturnDate { get; set; }

        /// <summary>
        /// The minimum total price for one adult passenger for a round trip from the origin to the destination and back. Always a string, formatted correctly for the provided currency
        /// </summary>
        /// <value>The minimum total price for one adult passenger for a round trip from the origin to the destination and back. Always a string, formatted correctly for the provided currency</value>
        [DataMember(Name="price", EmitDefaultValue=false)]
        public string Price { get; set; }

        /// <summary>
        /// The 2 character alphanumeric &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/Airline_codes\&quot;&gt;IATA airline code&lt;/a&gt; of the airline that is responsible for selling the traveler this flight - also known as the Validating Carrier. Airlines are specified using &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/Airline_codes\&quot;&gt;&lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/Airline_codes\&quot;&gt;IATA airline code&lt;/a&gt;s&lt;/a&gt;
        /// </summary>
        /// <value>The 2 character alphanumeric &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/Airline_codes\&quot;&gt;IATA airline code&lt;/a&gt; of the airline that is responsible for selling the traveler this flight - also known as the Validating Carrier. Airlines are specified using &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/Airline_codes\&quot;&gt;&lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/Airline_codes\&quot;&gt;IATA airline code&lt;/a&gt;s&lt;/a&gt;</value>
        [DataMember(Name="airline", EmitDefaultValue=false)]
        public string Airline { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ExtremeSearchResult {\n");
            sb.Append("  Destination: ").Append(Destination).Append("\n");
            sb.Append("  DepartureDate: ").Append(DepartureDate).Append("\n");
            sb.Append("  ReturnDate: ").Append(ReturnDate).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  Airline: ").Append(Airline).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ExtremeSearchResult);
        }

        /// <summary>
        /// Returns true if ExtremeSearchResult instances are equal
        /// </summary>
        /// <param name="other">Instance of ExtremeSearchResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExtremeSearchResult other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Destination == other.Destination ||
                    this.Destination != null &&
                    this.Destination.Equals(other.Destination)
                ) && 
                (
                    this.DepartureDate == other.DepartureDate ||
                    this.DepartureDate != null &&
                    this.DepartureDate.Equals(other.DepartureDate)
                ) && 
                (
                    this.ReturnDate == other.ReturnDate ||
                    this.ReturnDate != null &&
                    this.ReturnDate.Equals(other.ReturnDate)
                ) && 
                (
                    this.Price == other.Price ||
                    this.Price != null &&
                    this.Price.Equals(other.Price)
                ) && 
                (
                    this.Airline == other.Airline ||
                    this.Airline != null &&
                    this.Airline.Equals(other.Airline)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Destination != null)
                    hash = hash * 59 + this.Destination.GetHashCode();
                if (this.DepartureDate != null)
                    hash = hash * 59 + this.DepartureDate.GetHashCode();
                if (this.ReturnDate != null)
                    hash = hash * 59 + this.ReturnDate.GetHashCode();
                if (this.Price != null)
                    hash = hash * 59 + this.Price.GetHashCode();
                if (this.Airline != null)
                    hash = hash * 59 + this.Airline.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
