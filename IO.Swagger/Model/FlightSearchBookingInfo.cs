/* 
 * Amadeus Travel Innovation Sandbox
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// FlightSearchBookingInfo
    /// </summary>
    [DataContract]
    public partial class FlightSearchBookingInfo :  IEquatable<FlightSearchBookingInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FlightSearchBookingInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FlightSearchBookingInfo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FlightSearchBookingInfo" /> class.
        /// </summary>
        /// <param name="TravelClass">The cabin class offered on this flight. An enumeration that will read either ECONOMY, PREMIUM_ECONOMY, BUSINESS or FIRST (required).</param>
        /// <param name="CabinCode">A single character encoding of the travel_class, generally only available on responses from affiliates..</param>
        /// <param name="BookingCode">The Reservation Booking Designator code that determines the quality and terms of the flight offered for the given price. A single letter from A..Z (required).</param>
        /// <param name="SeatsRemaining">The minimum number of seats that are still available for this price at the time of search. If the value is a 4 or above, there are often more than this number of seats still available. (required).</param>
        /// <param name="FareFamily">Enumeration of the type of fare which this airline is providing, eg. VALUE. This is generally only available for affiliate responses..</param>
        /// <param name="FareBasis">See https://en.wikipedia.org/wiki/Fare_basis_code for the fare being offered..</param>
        public FlightSearchBookingInfo(string TravelClass = default(string), string CabinCode = default(string), string BookingCode = default(string), string SeatsRemaining = default(string), string FareFamily = default(string), string FareBasis = default(string))
        {
            // to ensure "TravelClass" is required (not null)
            if (TravelClass == null)
            {
                throw new InvalidDataException("TravelClass is a required property for FlightSearchBookingInfo and cannot be null");
            }
            else
            {
                this.TravelClass = TravelClass;
            }
            // to ensure "BookingCode" is required (not null)
            if (BookingCode == null)
            {
                throw new InvalidDataException("BookingCode is a required property for FlightSearchBookingInfo and cannot be null");
            }
            else
            {
                this.BookingCode = BookingCode;
            }
            // to ensure "SeatsRemaining" is required (not null)
            if (SeatsRemaining == null)
            {
                throw new InvalidDataException("SeatsRemaining is a required property for FlightSearchBookingInfo and cannot be null");
            }
            else
            {
                this.SeatsRemaining = SeatsRemaining;
            }
            this.CabinCode = CabinCode;
            this.FareFamily = FareFamily;
            this.FareBasis = FareBasis;
        }
        
        /// <summary>
        /// The cabin class offered on this flight. An enumeration that will read either ECONOMY, PREMIUM_ECONOMY, BUSINESS or FIRST
        /// </summary>
        /// <value>The cabin class offered on this flight. An enumeration that will read either ECONOMY, PREMIUM_ECONOMY, BUSINESS or FIRST</value>
        [DataMember(Name="travel_class", EmitDefaultValue=false)]
        public string TravelClass { get; set; }

        /// <summary>
        /// A single character encoding of the travel_class, generally only available on responses from affiliates.
        /// </summary>
        /// <value>A single character encoding of the travel_class, generally only available on responses from affiliates.</value>
        [DataMember(Name="cabin_code", EmitDefaultValue=false)]
        public string CabinCode { get; set; }

        /// <summary>
        /// The Reservation Booking Designator code that determines the quality and terms of the flight offered for the given price. A single letter from A..Z
        /// </summary>
        /// <value>The Reservation Booking Designator code that determines the quality and terms of the flight offered for the given price. A single letter from A..Z</value>
        [DataMember(Name="booking_code", EmitDefaultValue=false)]
        public string BookingCode { get; set; }

        /// <summary>
        /// The minimum number of seats that are still available for this price at the time of search. If the value is a 4 or above, there are often more than this number of seats still available.
        /// </summary>
        /// <value>The minimum number of seats that are still available for this price at the time of search. If the value is a 4 or above, there are often more than this number of seats still available.</value>
        [DataMember(Name="seats_remaining", EmitDefaultValue=false)]
        public string SeatsRemaining { get; set; }

        /// <summary>
        /// Enumeration of the type of fare which this airline is providing, eg. VALUE. This is generally only available for affiliate responses.
        /// </summary>
        /// <value>Enumeration of the type of fare which this airline is providing, eg. VALUE. This is generally only available for affiliate responses.</value>
        [DataMember(Name="fare_family", EmitDefaultValue=false)]
        public string FareFamily { get; set; }

        /// <summary>
        /// See https://en.wikipedia.org/wiki/Fare_basis_code for the fare being offered.
        /// </summary>
        /// <value>See https://en.wikipedia.org/wiki/Fare_basis_code for the fare being offered.</value>
        [DataMember(Name="fare_basis", EmitDefaultValue=false)]
        public string FareBasis { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FlightSearchBookingInfo {\n");
            sb.Append("  TravelClass: ").Append(TravelClass).Append("\n");
            sb.Append("  CabinCode: ").Append(CabinCode).Append("\n");
            sb.Append("  BookingCode: ").Append(BookingCode).Append("\n");
            sb.Append("  SeatsRemaining: ").Append(SeatsRemaining).Append("\n");
            sb.Append("  FareFamily: ").Append(FareFamily).Append("\n");
            sb.Append("  FareBasis: ").Append(FareBasis).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as FlightSearchBookingInfo);
        }

        /// <summary>
        /// Returns true if FlightSearchBookingInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of FlightSearchBookingInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FlightSearchBookingInfo other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.TravelClass == other.TravelClass ||
                    this.TravelClass != null &&
                    this.TravelClass.Equals(other.TravelClass)
                ) && 
                (
                    this.CabinCode == other.CabinCode ||
                    this.CabinCode != null &&
                    this.CabinCode.Equals(other.CabinCode)
                ) && 
                (
                    this.BookingCode == other.BookingCode ||
                    this.BookingCode != null &&
                    this.BookingCode.Equals(other.BookingCode)
                ) && 
                (
                    this.SeatsRemaining == other.SeatsRemaining ||
                    this.SeatsRemaining != null &&
                    this.SeatsRemaining.Equals(other.SeatsRemaining)
                ) && 
                (
                    this.FareFamily == other.FareFamily ||
                    this.FareFamily != null &&
                    this.FareFamily.Equals(other.FareFamily)
                ) && 
                (
                    this.FareBasis == other.FareBasis ||
                    this.FareBasis != null &&
                    this.FareBasis.Equals(other.FareBasis)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.TravelClass != null)
                    hash = hash * 59 + this.TravelClass.GetHashCode();
                if (this.CabinCode != null)
                    hash = hash * 59 + this.CabinCode.GetHashCode();
                if (this.BookingCode != null)
                    hash = hash * 59 + this.BookingCode.GetHashCode();
                if (this.SeatsRemaining != null)
                    hash = hash * 59 + this.SeatsRemaining.GetHashCode();
                if (this.FareFamily != null)
                    hash = hash * 59 + this.FareFamily.GetHashCode();
                if (this.FareBasis != null)
                    hash = hash * 59 + this.FareBasis.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
