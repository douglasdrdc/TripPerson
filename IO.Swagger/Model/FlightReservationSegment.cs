/* 
 * Amadeus Travel Innovation Sandbox
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// FlightReservationSegment
    /// </summary>
    [DataContract]
    public partial class FlightReservationSegment :  IEquatable<FlightReservationSegment>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FlightReservationSegment" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FlightReservationSegment() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FlightReservationSegment" /> class.
        /// </summary>
        /// <param name="Id">Uniquely identifies this flight in this travel record. This ID is persistent, and remains the same for the lifetime of the travel record. (required).</param>
        /// <param name="DepartsAt">Date and time of departure at the origin, in &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_8601\&quot;&gt;ISO 8601&lt;/a&gt;  date format yyyy-MM-ddTHH:mm in the local time at the origin airport (required).</param>
        /// <param name="ArrivesAt">Date and time of departure at the destination, in &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_8601\&quot;&gt;ISO 8601&lt;/a&gt;  date format yyyy-MM-ddTHH:mm in the local time at the destination airport (required).</param>
        /// <param name="Origin">Information on the origin airport, from which this flight departs (required).</param>
        /// <param name="Destination">Information on the destination airport, at which this flight arrives (required).</param>
        /// <param name="MarketingAirline">The 2 character alphanumeric &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/Airline_codes\&quot;&gt;IATA airline code&lt;/a&gt; of the airline that is responsible for the traveller this flight (required).</param>
        /// <param name="OperatingAirline">The 2 character alphanumeric &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/Airline_codes\&quot;&gt;IATA airline code&lt;/a&gt; of the airline that is providing the aircraft for this flight. Note that in the USA, if the marketing and operating carrier are different, you are legally required to display this in your application. (required).</param>
        /// <param name="FlightNumber">The identifier that the airline uses for this flight route. This is most commonly - but not always - a number. When combined with the airline and date, it identifies an individual aircraft&#39;s flight (required).</param>
        /// <param name="TravelerIds">Traveler identifiers to indicate the travelers to whom this ticket applies. (required).</param>
        /// <param name="BookingInfo">A booking information object with additional details about how the quality of this flight at the given price. (required).</param>
        public FlightReservationSegment(string Id = default(string), string DepartsAt = default(string), string ArrivesAt = default(string), Airport Origin = default(Airport), Airport Destination = default(Airport), string MarketingAirline = default(string), string OperatingAirline = default(string), string FlightNumber = default(string), List<string> TravelerIds = default(List<string>), FlightReservationBookingInfo BookingInfo = default(FlightReservationBookingInfo))
        {
            // to ensure "Id" is required (not null)
            if (Id == null)
            {
                throw new InvalidDataException("Id is a required property for FlightReservationSegment and cannot be null");
            }
            else
            {
                this.Id = Id;
            }
            // to ensure "DepartsAt" is required (not null)
            if (DepartsAt == null)
            {
                throw new InvalidDataException("DepartsAt is a required property for FlightReservationSegment and cannot be null");
            }
            else
            {
                this.DepartsAt = DepartsAt;
            }
            // to ensure "ArrivesAt" is required (not null)
            if (ArrivesAt == null)
            {
                throw new InvalidDataException("ArrivesAt is a required property for FlightReservationSegment and cannot be null");
            }
            else
            {
                this.ArrivesAt = ArrivesAt;
            }
            // to ensure "Origin" is required (not null)
            if (Origin == null)
            {
                throw new InvalidDataException("Origin is a required property for FlightReservationSegment and cannot be null");
            }
            else
            {
                this.Origin = Origin;
            }
            // to ensure "Destination" is required (not null)
            if (Destination == null)
            {
                throw new InvalidDataException("Destination is a required property for FlightReservationSegment and cannot be null");
            }
            else
            {
                this.Destination = Destination;
            }
            // to ensure "MarketingAirline" is required (not null)
            if (MarketingAirline == null)
            {
                throw new InvalidDataException("MarketingAirline is a required property for FlightReservationSegment and cannot be null");
            }
            else
            {
                this.MarketingAirline = MarketingAirline;
            }
            // to ensure "OperatingAirline" is required (not null)
            if (OperatingAirline == null)
            {
                throw new InvalidDataException("OperatingAirline is a required property for FlightReservationSegment and cannot be null");
            }
            else
            {
                this.OperatingAirline = OperatingAirline;
            }
            // to ensure "FlightNumber" is required (not null)
            if (FlightNumber == null)
            {
                throw new InvalidDataException("FlightNumber is a required property for FlightReservationSegment and cannot be null");
            }
            else
            {
                this.FlightNumber = FlightNumber;
            }
            // to ensure "TravelerIds" is required (not null)
            if (TravelerIds == null)
            {
                throw new InvalidDataException("TravelerIds is a required property for FlightReservationSegment and cannot be null");
            }
            else
            {
                this.TravelerIds = TravelerIds;
            }
            // to ensure "BookingInfo" is required (not null)
            if (BookingInfo == null)
            {
                throw new InvalidDataException("BookingInfo is a required property for FlightReservationSegment and cannot be null");
            }
            else
            {
                this.BookingInfo = BookingInfo;
            }
        }
        
        /// <summary>
        /// Uniquely identifies this flight in this travel record. This ID is persistent, and remains the same for the lifetime of the travel record.
        /// </summary>
        /// <value>Uniquely identifies this flight in this travel record. This ID is persistent, and remains the same for the lifetime of the travel record.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Date and time of departure at the origin, in &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_8601\&quot;&gt;ISO 8601&lt;/a&gt;  date format yyyy-MM-ddTHH:mm in the local time at the origin airport
        /// </summary>
        /// <value>Date and time of departure at the origin, in &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_8601\&quot;&gt;ISO 8601&lt;/a&gt;  date format yyyy-MM-ddTHH:mm in the local time at the origin airport</value>
        [DataMember(Name="departs_at", EmitDefaultValue=false)]
        public string DepartsAt { get; set; }

        /// <summary>
        /// Date and time of departure at the destination, in &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_8601\&quot;&gt;ISO 8601&lt;/a&gt;  date format yyyy-MM-ddTHH:mm in the local time at the destination airport
        /// </summary>
        /// <value>Date and time of departure at the destination, in &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_8601\&quot;&gt;ISO 8601&lt;/a&gt;  date format yyyy-MM-ddTHH:mm in the local time at the destination airport</value>
        [DataMember(Name="arrives_at", EmitDefaultValue=false)]
        public string ArrivesAt { get; set; }

        /// <summary>
        /// Information on the origin airport, from which this flight departs
        /// </summary>
        /// <value>Information on the origin airport, from which this flight departs</value>
        [DataMember(Name="origin", EmitDefaultValue=false)]
        public Airport Origin { get; set; }

        /// <summary>
        /// Information on the destination airport, at which this flight arrives
        /// </summary>
        /// <value>Information on the destination airport, at which this flight arrives</value>
        [DataMember(Name="destination", EmitDefaultValue=false)]
        public Airport Destination { get; set; }

        /// <summary>
        /// The 2 character alphanumeric &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/Airline_codes\&quot;&gt;IATA airline code&lt;/a&gt; of the airline that is responsible for the traveller this flight
        /// </summary>
        /// <value>The 2 character alphanumeric &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/Airline_codes\&quot;&gt;IATA airline code&lt;/a&gt; of the airline that is responsible for the traveller this flight</value>
        [DataMember(Name="marketing_airline", EmitDefaultValue=false)]
        public string MarketingAirline { get; set; }

        /// <summary>
        /// The 2 character alphanumeric &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/Airline_codes\&quot;&gt;IATA airline code&lt;/a&gt; of the airline that is providing the aircraft for this flight. Note that in the USA, if the marketing and operating carrier are different, you are legally required to display this in your application.
        /// </summary>
        /// <value>The 2 character alphanumeric &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/Airline_codes\&quot;&gt;IATA airline code&lt;/a&gt; of the airline that is providing the aircraft for this flight. Note that in the USA, if the marketing and operating carrier are different, you are legally required to display this in your application.</value>
        [DataMember(Name="operating_airline", EmitDefaultValue=false)]
        public string OperatingAirline { get; set; }

        /// <summary>
        /// The identifier that the airline uses for this flight route. This is most commonly - but not always - a number. When combined with the airline and date, it identifies an individual aircraft&#39;s flight
        /// </summary>
        /// <value>The identifier that the airline uses for this flight route. This is most commonly - but not always - a number. When combined with the airline and date, it identifies an individual aircraft&#39;s flight</value>
        [DataMember(Name="flight_number", EmitDefaultValue=false)]
        public string FlightNumber { get; set; }

        /// <summary>
        /// Traveler identifiers to indicate the travelers to whom this ticket applies.
        /// </summary>
        /// <value>Traveler identifiers to indicate the travelers to whom this ticket applies.</value>
        [DataMember(Name="traveler_ids", EmitDefaultValue=false)]
        public List<string> TravelerIds { get; set; }

        /// <summary>
        /// A booking information object with additional details about how the quality of this flight at the given price.
        /// </summary>
        /// <value>A booking information object with additional details about how the quality of this flight at the given price.</value>
        [DataMember(Name="booking_info", EmitDefaultValue=false)]
        public FlightReservationBookingInfo BookingInfo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FlightReservationSegment {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  DepartsAt: ").Append(DepartsAt).Append("\n");
            sb.Append("  ArrivesAt: ").Append(ArrivesAt).Append("\n");
            sb.Append("  Origin: ").Append(Origin).Append("\n");
            sb.Append("  Destination: ").Append(Destination).Append("\n");
            sb.Append("  MarketingAirline: ").Append(MarketingAirline).Append("\n");
            sb.Append("  OperatingAirline: ").Append(OperatingAirline).Append("\n");
            sb.Append("  FlightNumber: ").Append(FlightNumber).Append("\n");
            sb.Append("  TravelerIds: ").Append(TravelerIds).Append("\n");
            sb.Append("  BookingInfo: ").Append(BookingInfo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as FlightReservationSegment);
        }

        /// <summary>
        /// Returns true if FlightReservationSegment instances are equal
        /// </summary>
        /// <param name="other">Instance of FlightReservationSegment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FlightReservationSegment other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.DepartsAt == other.DepartsAt ||
                    this.DepartsAt != null &&
                    this.DepartsAt.Equals(other.DepartsAt)
                ) && 
                (
                    this.ArrivesAt == other.ArrivesAt ||
                    this.ArrivesAt != null &&
                    this.ArrivesAt.Equals(other.ArrivesAt)
                ) && 
                (
                    this.Origin == other.Origin ||
                    this.Origin != null &&
                    this.Origin.Equals(other.Origin)
                ) && 
                (
                    this.Destination == other.Destination ||
                    this.Destination != null &&
                    this.Destination.Equals(other.Destination)
                ) && 
                (
                    this.MarketingAirline == other.MarketingAirline ||
                    this.MarketingAirline != null &&
                    this.MarketingAirline.Equals(other.MarketingAirline)
                ) && 
                (
                    this.OperatingAirline == other.OperatingAirline ||
                    this.OperatingAirline != null &&
                    this.OperatingAirline.Equals(other.OperatingAirline)
                ) && 
                (
                    this.FlightNumber == other.FlightNumber ||
                    this.FlightNumber != null &&
                    this.FlightNumber.Equals(other.FlightNumber)
                ) && 
                (
                    this.TravelerIds == other.TravelerIds ||
                    this.TravelerIds != null &&
                    this.TravelerIds.SequenceEqual(other.TravelerIds)
                ) && 
                (
                    this.BookingInfo == other.BookingInfo ||
                    this.BookingInfo != null &&
                    this.BookingInfo.Equals(other.BookingInfo)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.DepartsAt != null)
                    hash = hash * 59 + this.DepartsAt.GetHashCode();
                if (this.ArrivesAt != null)
                    hash = hash * 59 + this.ArrivesAt.GetHashCode();
                if (this.Origin != null)
                    hash = hash * 59 + this.Origin.GetHashCode();
                if (this.Destination != null)
                    hash = hash * 59 + this.Destination.GetHashCode();
                if (this.MarketingAirline != null)
                    hash = hash * 59 + this.MarketingAirline.GetHashCode();
                if (this.OperatingAirline != null)
                    hash = hash * 59 + this.OperatingAirline.GetHashCode();
                if (this.FlightNumber != null)
                    hash = hash * 59 + this.FlightNumber.GetHashCode();
                if (this.TravelerIds != null)
                    hash = hash * 59 + this.TravelerIds.GetHashCode();
                if (this.BookingInfo != null)
                    hash = hash * 59 + this.BookingInfo.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
