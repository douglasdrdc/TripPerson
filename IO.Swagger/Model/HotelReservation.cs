/* 
 * Amadeus Travel Innovation Sandbox
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// HotelReservation
    /// </summary>
    [DataContract]
    public partial class HotelReservation :  IEquatable<HotelReservation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HotelReservation" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected HotelReservation() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="HotelReservation" /> class.
        /// </summary>
        /// <param name="Id">Uniquely identifies this hotel room reservation in this travel record. This ID is persistent, and remains the same for the lifetime of the travel record. (required).</param>
        /// <param name="CheckIn">Date on which the guest will begin their stay in the hotel, in the &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_8601\&quot;&gt;ISO 8601&lt;/a&gt; date format yyyy-MM-dd. (required).</param>
        /// <param name="CheckOut">Date on which the guest will end their stay in the hotel, in the &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_8601\&quot;&gt;ISO 8601&lt;/a&gt; date format yyyy-MM-dd. (required).</param>
        /// <param name="PropertyCode">The 8 character property code of this given hotel. The first 2 characters of this code are the chain code that can be specified in the input. The remaining elements are proprietary to each hotel chain. (required).</param>
        /// <param name="PropertyName">The name of this hotel. (required).</param>
        /// <param name="TotalPrice">The total price of this stay, from the given check in date to the given check out date..</param>
        /// <param name="TravelerIds">Traveler identifiers to indicate the travelers to whom this hotel room reservation applies. Generally all non-infant room occupants will be marked in this array. (required).</param>
        /// <param name="BookingInfo">Additional details and status of this hotel room reservation. (required).</param>
        public HotelReservation(string Id = default(string), DateTime? CheckIn = default(DateTime?), DateTime? CheckOut = default(DateTime?), string PropertyCode = default(string), string PropertyName = default(string), Amount TotalPrice = default(Amount), List<string> TravelerIds = default(List<string>), HotelReservationBookingInfo BookingInfo = default(HotelReservationBookingInfo))
        {
            // to ensure "Id" is required (not null)
            if (Id == null)
            {
                throw new InvalidDataException("Id is a required property for HotelReservation and cannot be null");
            }
            else
            {
                this.Id = Id;
            }
            // to ensure "CheckIn" is required (not null)
            if (CheckIn == null)
            {
                throw new InvalidDataException("CheckIn is a required property for HotelReservation and cannot be null");
            }
            else
            {
                this.CheckIn = CheckIn;
            }
            // to ensure "CheckOut" is required (not null)
            if (CheckOut == null)
            {
                throw new InvalidDataException("CheckOut is a required property for HotelReservation and cannot be null");
            }
            else
            {
                this.CheckOut = CheckOut;
            }
            // to ensure "PropertyCode" is required (not null)
            if (PropertyCode == null)
            {
                throw new InvalidDataException("PropertyCode is a required property for HotelReservation and cannot be null");
            }
            else
            {
                this.PropertyCode = PropertyCode;
            }
            // to ensure "PropertyName" is required (not null)
            if (PropertyName == null)
            {
                throw new InvalidDataException("PropertyName is a required property for HotelReservation and cannot be null");
            }
            else
            {
                this.PropertyName = PropertyName;
            }
            // to ensure "TravelerIds" is required (not null)
            if (TravelerIds == null)
            {
                throw new InvalidDataException("TravelerIds is a required property for HotelReservation and cannot be null");
            }
            else
            {
                this.TravelerIds = TravelerIds;
            }
            // to ensure "BookingInfo" is required (not null)
            if (BookingInfo == null)
            {
                throw new InvalidDataException("BookingInfo is a required property for HotelReservation and cannot be null");
            }
            else
            {
                this.BookingInfo = BookingInfo;
            }
            this.TotalPrice = TotalPrice;
        }
        
        /// <summary>
        /// Uniquely identifies this hotel room reservation in this travel record. This ID is persistent, and remains the same for the lifetime of the travel record.
        /// </summary>
        /// <value>Uniquely identifies this hotel room reservation in this travel record. This ID is persistent, and remains the same for the lifetime of the travel record.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Date on which the guest will begin their stay in the hotel, in the &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_8601\&quot;&gt;ISO 8601&lt;/a&gt; date format yyyy-MM-dd.
        /// </summary>
        /// <value>Date on which the guest will begin their stay in the hotel, in the &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_8601\&quot;&gt;ISO 8601&lt;/a&gt; date format yyyy-MM-dd.</value>
        [DataMember(Name="check_in", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? CheckIn { get; set; }

        /// <summary>
        /// Date on which the guest will end their stay in the hotel, in the &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_8601\&quot;&gt;ISO 8601&lt;/a&gt; date format yyyy-MM-dd.
        /// </summary>
        /// <value>Date on which the guest will end their stay in the hotel, in the &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_8601\&quot;&gt;ISO 8601&lt;/a&gt; date format yyyy-MM-dd.</value>
        [DataMember(Name="check_out", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? CheckOut { get; set; }

        /// <summary>
        /// The 8 character property code of this given hotel. The first 2 characters of this code are the chain code that can be specified in the input. The remaining elements are proprietary to each hotel chain.
        /// </summary>
        /// <value>The 8 character property code of this given hotel. The first 2 characters of this code are the chain code that can be specified in the input. The remaining elements are proprietary to each hotel chain.</value>
        [DataMember(Name="property_code", EmitDefaultValue=false)]
        public string PropertyCode { get; set; }

        /// <summary>
        /// The name of this hotel.
        /// </summary>
        /// <value>The name of this hotel.</value>
        [DataMember(Name="property_name", EmitDefaultValue=false)]
        public string PropertyName { get; set; }

        /// <summary>
        /// The total price of this stay, from the given check in date to the given check out date.
        /// </summary>
        /// <value>The total price of this stay, from the given check in date to the given check out date.</value>
        [DataMember(Name="total_price", EmitDefaultValue=false)]
        public Amount TotalPrice { get; set; }

        /// <summary>
        /// Traveler identifiers to indicate the travelers to whom this hotel room reservation applies. Generally all non-infant room occupants will be marked in this array.
        /// </summary>
        /// <value>Traveler identifiers to indicate the travelers to whom this hotel room reservation applies. Generally all non-infant room occupants will be marked in this array.</value>
        [DataMember(Name="traveler_ids", EmitDefaultValue=false)]
        public List<string> TravelerIds { get; set; }

        /// <summary>
        /// Additional details and status of this hotel room reservation.
        /// </summary>
        /// <value>Additional details and status of this hotel room reservation.</value>
        [DataMember(Name="booking_info", EmitDefaultValue=false)]
        public HotelReservationBookingInfo BookingInfo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HotelReservation {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CheckIn: ").Append(CheckIn).Append("\n");
            sb.Append("  CheckOut: ").Append(CheckOut).Append("\n");
            sb.Append("  PropertyCode: ").Append(PropertyCode).Append("\n");
            sb.Append("  PropertyName: ").Append(PropertyName).Append("\n");
            sb.Append("  TotalPrice: ").Append(TotalPrice).Append("\n");
            sb.Append("  TravelerIds: ").Append(TravelerIds).Append("\n");
            sb.Append("  BookingInfo: ").Append(BookingInfo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as HotelReservation);
        }

        /// <summary>
        /// Returns true if HotelReservation instances are equal
        /// </summary>
        /// <param name="other">Instance of HotelReservation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HotelReservation other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.CheckIn == other.CheckIn ||
                    this.CheckIn != null &&
                    this.CheckIn.Equals(other.CheckIn)
                ) && 
                (
                    this.CheckOut == other.CheckOut ||
                    this.CheckOut != null &&
                    this.CheckOut.Equals(other.CheckOut)
                ) && 
                (
                    this.PropertyCode == other.PropertyCode ||
                    this.PropertyCode != null &&
                    this.PropertyCode.Equals(other.PropertyCode)
                ) && 
                (
                    this.PropertyName == other.PropertyName ||
                    this.PropertyName != null &&
                    this.PropertyName.Equals(other.PropertyName)
                ) && 
                (
                    this.TotalPrice == other.TotalPrice ||
                    this.TotalPrice != null &&
                    this.TotalPrice.Equals(other.TotalPrice)
                ) && 
                (
                    this.TravelerIds == other.TravelerIds ||
                    this.TravelerIds != null &&
                    this.TravelerIds.SequenceEqual(other.TravelerIds)
                ) && 
                (
                    this.BookingInfo == other.BookingInfo ||
                    this.BookingInfo != null &&
                    this.BookingInfo.Equals(other.BookingInfo)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.CheckIn != null)
                    hash = hash * 59 + this.CheckIn.GetHashCode();
                if (this.CheckOut != null)
                    hash = hash * 59 + this.CheckOut.GetHashCode();
                if (this.PropertyCode != null)
                    hash = hash * 59 + this.PropertyCode.GetHashCode();
                if (this.PropertyName != null)
                    hash = hash * 59 + this.PropertyName.GetHashCode();
                if (this.TotalPrice != null)
                    hash = hash * 59 + this.TotalPrice.GetHashCode();
                if (this.TravelerIds != null)
                    hash = hash * 59 + this.TravelerIds.GetHashCode();
                if (this.BookingInfo != null)
                    hash = hash * 59 + this.BookingInfo.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
