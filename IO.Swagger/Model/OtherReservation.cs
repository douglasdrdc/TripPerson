/* 
 * Amadeus Travel Innovation Sandbox
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// OtherReservation
    /// </summary>
    [DataContract]
    public partial class OtherReservation :  IEquatable<OtherReservation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OtherReservation" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OtherReservation() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OtherReservation" /> class.
        /// </summary>
        /// <param name="Id">Uniquely identifies this other reservation in this travel record. This ID is persistent, and remains the same for the lifetime of the travel record. (required).</param>
        /// <param name="Date">Date on which this other reservation will begin, in the &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_8601\&quot;&gt;ISO 8601&lt;/a&gt; date format yyyy-MM-dd. (required).</param>
        /// <param name="Location">A 3 letter &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/International_Air_Transport_Association_airport_code\&quot;&gt;IATA code&lt;/a&gt; that identifies where this other reservation will occur. (required).</param>
        /// <param name="Description">A free-text description of this reservation, that will inform you of its functional meaning..</param>
        /// <param name="TravelerIds">Traveler identifiers to indicate the travelers to whom this reservation applies. (required).</param>
        /// <param name="BookingInfo">The status of this reservation. (required).</param>
        public OtherReservation(string Id = default(string), DateTime? Date = default(DateTime?), string Location = default(string), string Description = default(string), List<string> TravelerIds = default(List<string>), OtherReservationBookingInfo BookingInfo = default(OtherReservationBookingInfo))
        {
            // to ensure "Id" is required (not null)
            if (Id == null)
            {
                throw new InvalidDataException("Id is a required property for OtherReservation and cannot be null");
            }
            else
            {
                this.Id = Id;
            }
            // to ensure "Date" is required (not null)
            if (Date == null)
            {
                throw new InvalidDataException("Date is a required property for OtherReservation and cannot be null");
            }
            else
            {
                this.Date = Date;
            }
            // to ensure "Location" is required (not null)
            if (Location == null)
            {
                throw new InvalidDataException("Location is a required property for OtherReservation and cannot be null");
            }
            else
            {
                this.Location = Location;
            }
            // to ensure "TravelerIds" is required (not null)
            if (TravelerIds == null)
            {
                throw new InvalidDataException("TravelerIds is a required property for OtherReservation and cannot be null");
            }
            else
            {
                this.TravelerIds = TravelerIds;
            }
            // to ensure "BookingInfo" is required (not null)
            if (BookingInfo == null)
            {
                throw new InvalidDataException("BookingInfo is a required property for OtherReservation and cannot be null");
            }
            else
            {
                this.BookingInfo = BookingInfo;
            }
            this.Description = Description;
        }
        
        /// <summary>
        /// Uniquely identifies this other reservation in this travel record. This ID is persistent, and remains the same for the lifetime of the travel record.
        /// </summary>
        /// <value>Uniquely identifies this other reservation in this travel record. This ID is persistent, and remains the same for the lifetime of the travel record.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Date on which this other reservation will begin, in the &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_8601\&quot;&gt;ISO 8601&lt;/a&gt; date format yyyy-MM-dd.
        /// </summary>
        /// <value>Date on which this other reservation will begin, in the &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_8601\&quot;&gt;ISO 8601&lt;/a&gt; date format yyyy-MM-dd.</value>
        [DataMember(Name="date", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? Date { get; set; }

        /// <summary>
        /// A 3 letter &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/International_Air_Transport_Association_airport_code\&quot;&gt;IATA code&lt;/a&gt; that identifies where this other reservation will occur.
        /// </summary>
        /// <value>A 3 letter &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/International_Air_Transport_Association_airport_code\&quot;&gt;IATA code&lt;/a&gt; that identifies where this other reservation will occur.</value>
        [DataMember(Name="location", EmitDefaultValue=false)]
        public string Location { get; set; }

        /// <summary>
        /// A free-text description of this reservation, that will inform you of its functional meaning.
        /// </summary>
        /// <value>A free-text description of this reservation, that will inform you of its functional meaning.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Traveler identifiers to indicate the travelers to whom this reservation applies.
        /// </summary>
        /// <value>Traveler identifiers to indicate the travelers to whom this reservation applies.</value>
        [DataMember(Name="traveler_ids", EmitDefaultValue=false)]
        public List<string> TravelerIds { get; set; }

        /// <summary>
        /// The status of this reservation.
        /// </summary>
        /// <value>The status of this reservation.</value>
        [DataMember(Name="booking_info", EmitDefaultValue=false)]
        public OtherReservationBookingInfo BookingInfo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OtherReservation {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  TravelerIds: ").Append(TravelerIds).Append("\n");
            sb.Append("  BookingInfo: ").Append(BookingInfo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as OtherReservation);
        }

        /// <summary>
        /// Returns true if OtherReservation instances are equal
        /// </summary>
        /// <param name="other">Instance of OtherReservation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OtherReservation other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Date == other.Date ||
                    this.Date != null &&
                    this.Date.Equals(other.Date)
                ) && 
                (
                    this.Location == other.Location ||
                    this.Location != null &&
                    this.Location.Equals(other.Location)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.TravelerIds == other.TravelerIds ||
                    this.TravelerIds != null &&
                    this.TravelerIds.SequenceEqual(other.TravelerIds)
                ) && 
                (
                    this.BookingInfo == other.BookingInfo ||
                    this.BookingInfo != null &&
                    this.BookingInfo.Equals(other.BookingInfo)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.Date != null)
                    hash = hash * 59 + this.Date.GetHashCode();
                if (this.Location != null)
                    hash = hash * 59 + this.Location.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.TravelerIds != null)
                    hash = hash * 59 + this.TravelerIds.GetHashCode();
                if (this.BookingInfo != null)
                    hash = hash * 59 + this.BookingInfo.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
