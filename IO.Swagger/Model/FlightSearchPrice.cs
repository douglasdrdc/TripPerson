/* 
 * Amadeus Travel Innovation Sandbox
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// FlightSearchPrice
    /// </summary>
    [DataContract]
    public partial class FlightSearchPrice :  IEquatable<FlightSearchPrice>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FlightSearchPrice" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FlightSearchPrice() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FlightSearchPrice" /> class.
        /// </summary>
        /// <param name="TotalPrice">The total price for all the requested passengers for this flight (required).</param>
        /// <param name="PricePerAdult">The per-passenger fare for each adult on this flight (required).</param>
        /// <param name="PricePerChild">The per-passenger fare for each child on this flight.</param>
        /// <param name="PricePerInfant">The per-passenger fare for each infant on this flight.</param>
        /// <param name="Restrictions">The restrictions associated with this fare (required).</param>
        public FlightSearchPrice(string TotalPrice = default(string), Fare PricePerAdult = default(Fare), Fare PricePerChild = default(Fare), Fare PricePerInfant = default(Fare), FareRestrictions Restrictions = default(FareRestrictions))
        {
            // to ensure "TotalPrice" is required (not null)
            if (TotalPrice == null)
            {
                throw new InvalidDataException("TotalPrice is a required property for FlightSearchPrice and cannot be null");
            }
            else
            {
                this.TotalPrice = TotalPrice;
            }
            // to ensure "PricePerAdult" is required (not null)
            if (PricePerAdult == null)
            {
                throw new InvalidDataException("PricePerAdult is a required property for FlightSearchPrice and cannot be null");
            }
            else
            {
                this.PricePerAdult = PricePerAdult;
            }
            // to ensure "Restrictions" is required (not null)
            if (Restrictions == null)
            {
                throw new InvalidDataException("Restrictions is a required property for FlightSearchPrice and cannot be null");
            }
            else
            {
                this.Restrictions = Restrictions;
            }
            this.PricePerChild = PricePerChild;
            this.PricePerInfant = PricePerInfant;
        }
        
        /// <summary>
        /// The total price for all the requested passengers for this flight
        /// </summary>
        /// <value>The total price for all the requested passengers for this flight</value>
        [DataMember(Name="total_price", EmitDefaultValue=false)]
        public string TotalPrice { get; set; }

        /// <summary>
        /// The per-passenger fare for each adult on this flight
        /// </summary>
        /// <value>The per-passenger fare for each adult on this flight</value>
        [DataMember(Name="price_per_adult", EmitDefaultValue=false)]
        public Fare PricePerAdult { get; set; }

        /// <summary>
        /// The per-passenger fare for each child on this flight
        /// </summary>
        /// <value>The per-passenger fare for each child on this flight</value>
        [DataMember(Name="price_per_child", EmitDefaultValue=false)]
        public Fare PricePerChild { get; set; }

        /// <summary>
        /// The per-passenger fare for each infant on this flight
        /// </summary>
        /// <value>The per-passenger fare for each infant on this flight</value>
        [DataMember(Name="price_per_infant", EmitDefaultValue=false)]
        public Fare PricePerInfant { get; set; }

        /// <summary>
        /// The restrictions associated with this fare
        /// </summary>
        /// <value>The restrictions associated with this fare</value>
        [DataMember(Name="restrictions", EmitDefaultValue=false)]
        public FareRestrictions Restrictions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FlightSearchPrice {\n");
            sb.Append("  TotalPrice: ").Append(TotalPrice).Append("\n");
            sb.Append("  PricePerAdult: ").Append(PricePerAdult).Append("\n");
            sb.Append("  PricePerChild: ").Append(PricePerChild).Append("\n");
            sb.Append("  PricePerInfant: ").Append(PricePerInfant).Append("\n");
            sb.Append("  Restrictions: ").Append(Restrictions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as FlightSearchPrice);
        }

        /// <summary>
        /// Returns true if FlightSearchPrice instances are equal
        /// </summary>
        /// <param name="other">Instance of FlightSearchPrice to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FlightSearchPrice other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.TotalPrice == other.TotalPrice ||
                    this.TotalPrice != null &&
                    this.TotalPrice.Equals(other.TotalPrice)
                ) && 
                (
                    this.PricePerAdult == other.PricePerAdult ||
                    this.PricePerAdult != null &&
                    this.PricePerAdult.Equals(other.PricePerAdult)
                ) && 
                (
                    this.PricePerChild == other.PricePerChild ||
                    this.PricePerChild != null &&
                    this.PricePerChild.Equals(other.PricePerChild)
                ) && 
                (
                    this.PricePerInfant == other.PricePerInfant ||
                    this.PricePerInfant != null &&
                    this.PricePerInfant.Equals(other.PricePerInfant)
                ) && 
                (
                    this.Restrictions == other.Restrictions ||
                    this.Restrictions != null &&
                    this.Restrictions.Equals(other.Restrictions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.TotalPrice != null)
                    hash = hash * 59 + this.TotalPrice.GetHashCode();
                if (this.PricePerAdult != null)
                    hash = hash * 59 + this.PricePerAdult.GetHashCode();
                if (this.PricePerChild != null)
                    hash = hash * 59 + this.PricePerChild.GetHashCode();
                if (this.PricePerInfant != null)
                    hash = hash * 59 + this.PricePerInfant.GetHashCode();
                if (this.Restrictions != null)
                    hash = hash * 59 + this.Restrictions.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
