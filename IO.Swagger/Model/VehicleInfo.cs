/* 
 * Amadeus Travel Innovation Sandbox
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// VehicleInfo
    /// </summary>
    [DataContract]
    public partial class VehicleInfo :  IEquatable<VehicleInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VehicleInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected VehicleInfo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="VehicleInfo" /> class.
        /// </summary>
        /// <param name="AcrissCode">The 4 letter &lt;a href&#x3D;\&quot;http://en.wikipedia.org/wiki/ACRISS_Car_Classification_Code\&quot;&gt;ACRISS code&lt;/a&gt; that defines the properties of vehicle being rented. (required).</param>
        /// <param name="Category">The decoded ACRISS vehicle category (For example&amp;colon; Economy, Luxury, Standard). (required).</param>
        /// <param name="Type">The decoded ACRISS vehicle type, to let you know what kind of vehicle this is (For example&amp;colon; Van, SUV, Pickup)..</param>
        /// <param name="Transmission">The decoded ACRISS transmission type, to let you know if this vehicle is Automatic or Manual Transmission (stick-shift)..</param>
        /// <param name="AirConditioning">The decoded ACRISS air_conditioning information, to let you know if this vehicle has air conditioning.</param>
        /// <param name="Fuel">The decoded ACRISS fuel type, to let you know if this vehicle is hybrid, electric, etc..</param>
        public VehicleInfo(string AcrissCode = default(string), string Category = default(string), string Type = default(string), string Transmission = default(string), bool? AirConditioning = default(bool?), string Fuel = default(string))
        {
            // to ensure "AcrissCode" is required (not null)
            if (AcrissCode == null)
            {
                throw new InvalidDataException("AcrissCode is a required property for VehicleInfo and cannot be null");
            }
            else
            {
                this.AcrissCode = AcrissCode;
            }
            // to ensure "Category" is required (not null)
            if (Category == null)
            {
                throw new InvalidDataException("Category is a required property for VehicleInfo and cannot be null");
            }
            else
            {
                this.Category = Category;
            }
            this.Type = Type;
            this.Transmission = Transmission;
            this.AirConditioning = AirConditioning;
            this.Fuel = Fuel;
        }
        
        /// <summary>
        /// The 4 letter &lt;a href&#x3D;\&quot;http://en.wikipedia.org/wiki/ACRISS_Car_Classification_Code\&quot;&gt;ACRISS code&lt;/a&gt; that defines the properties of vehicle being rented.
        /// </summary>
        /// <value>The 4 letter &lt;a href&#x3D;\&quot;http://en.wikipedia.org/wiki/ACRISS_Car_Classification_Code\&quot;&gt;ACRISS code&lt;/a&gt; that defines the properties of vehicle being rented.</value>
        [DataMember(Name="acriss_code", EmitDefaultValue=false)]
        public string AcrissCode { get; set; }

        /// <summary>
        /// The decoded ACRISS vehicle category (For example&amp;colon; Economy, Luxury, Standard).
        /// </summary>
        /// <value>The decoded ACRISS vehicle category (For example&amp;colon; Economy, Luxury, Standard).</value>
        [DataMember(Name="category", EmitDefaultValue=false)]
        public string Category { get; set; }

        /// <summary>
        /// The decoded ACRISS vehicle type, to let you know what kind of vehicle this is (For example&amp;colon; Van, SUV, Pickup).
        /// </summary>
        /// <value>The decoded ACRISS vehicle type, to let you know what kind of vehicle this is (For example&amp;colon; Van, SUV, Pickup).</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// The decoded ACRISS transmission type, to let you know if this vehicle is Automatic or Manual Transmission (stick-shift).
        /// </summary>
        /// <value>The decoded ACRISS transmission type, to let you know if this vehicle is Automatic or Manual Transmission (stick-shift).</value>
        [DataMember(Name="transmission", EmitDefaultValue=false)]
        public string Transmission { get; set; }

        /// <summary>
        /// The decoded ACRISS air_conditioning information, to let you know if this vehicle has air conditioning
        /// </summary>
        /// <value>The decoded ACRISS air_conditioning information, to let you know if this vehicle has air conditioning</value>
        [DataMember(Name="air_conditioning", EmitDefaultValue=false)]
        public bool? AirConditioning { get; set; }

        /// <summary>
        /// The decoded ACRISS fuel type, to let you know if this vehicle is hybrid, electric, etc.
        /// </summary>
        /// <value>The decoded ACRISS fuel type, to let you know if this vehicle is hybrid, electric, etc.</value>
        [DataMember(Name="fuel", EmitDefaultValue=false)]
        public string Fuel { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VehicleInfo {\n");
            sb.Append("  AcrissCode: ").Append(AcrissCode).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Transmission: ").Append(Transmission).Append("\n");
            sb.Append("  AirConditioning: ").Append(AirConditioning).Append("\n");
            sb.Append("  Fuel: ").Append(Fuel).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as VehicleInfo);
        }

        /// <summary>
        /// Returns true if VehicleInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of VehicleInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VehicleInfo other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AcrissCode == other.AcrissCode ||
                    this.AcrissCode != null &&
                    this.AcrissCode.Equals(other.AcrissCode)
                ) && 
                (
                    this.Category == other.Category ||
                    this.Category != null &&
                    this.Category.Equals(other.Category)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.Transmission == other.Transmission ||
                    this.Transmission != null &&
                    this.Transmission.Equals(other.Transmission)
                ) && 
                (
                    this.AirConditioning == other.AirConditioning ||
                    this.AirConditioning != null &&
                    this.AirConditioning.Equals(other.AirConditioning)
                ) && 
                (
                    this.Fuel == other.Fuel ||
                    this.Fuel != null &&
                    this.Fuel.Equals(other.Fuel)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AcrissCode != null)
                    hash = hash * 59 + this.AcrissCode.GetHashCode();
                if (this.Category != null)
                    hash = hash * 59 + this.Category.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.Transmission != null)
                    hash = hash * 59 + this.Transmission.GetHashCode();
                if (this.AirConditioning != null)
                    hash = hash * 59 + this.AirConditioning.GetHashCode();
                if (this.Fuel != null)
                    hash = hash * 59 + this.Fuel.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
