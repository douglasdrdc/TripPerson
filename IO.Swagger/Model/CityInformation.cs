/* 
 * Amadeus Travel Innovation Sandbox
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// CityInformation
    /// </summary>
    [DataContract]
    public partial class CityInformation :  IEquatable<CityInformation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CityInformation" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CityInformation() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CityInformation" /> class.
        /// </summary>
        /// <param name="Code">The &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/International_Air_Transport_Association_airport_code\&quot;&gt;IATA code&lt;/a&gt; of this city. If you intend to make a flight search from the output of this call, I recommend using this as your input parameter as it generally gives the best results. (required).</param>
        /// <param name="GeonamesID">The ID of this city in the open-sourced Geonames DB (required).</param>
        /// <param name="Name">The name of this city, in English (required).</param>
        /// <param name="State">The state code of this city, if applicable.</param>
        /// <param name="Country">The &lt;a href&#x3D;\&quot;http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2\&quot;&gt;ISO 3166-1 alpha-2 country code&lt;/a&gt; in which this city can be found. (required).</param>
        /// <param name="Location">This city&#39;s approximate geolocation. The exact center of a city is often not an exact location, so be aware that this might not be exact. (required).</param>
        /// <param name="Timezone">The &lt;a href&#x3D;\&quot;http://en.wikipedia.org/wiki/List_of_tz_database_time_zones\&quot;&gt;Olson format&lt;/a&gt; name of the timezone in which this city is located (required).</param>
        /// <param name="Currency">The ISO-4217 currency code of the official local currency at this location.</param>
        public CityInformation(string Code = default(string), string GeonamesID = default(string), string Name = default(string), string State = default(string), string Country = default(string), Geolocation Location = default(Geolocation), string Timezone = default(string), string Currency = default(string))
        {
            // to ensure "Code" is required (not null)
            if (Code == null)
            {
                throw new InvalidDataException("Code is a required property for CityInformation and cannot be null");
            }
            else
            {
                this.Code = Code;
            }
            // to ensure "GeonamesID" is required (not null)
            if (GeonamesID == null)
            {
                throw new InvalidDataException("GeonamesID is a required property for CityInformation and cannot be null");
            }
            else
            {
                this.GeonamesID = GeonamesID;
            }
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for CityInformation and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            // to ensure "Country" is required (not null)
            if (Country == null)
            {
                throw new InvalidDataException("Country is a required property for CityInformation and cannot be null");
            }
            else
            {
                this.Country = Country;
            }
            // to ensure "Location" is required (not null)
            if (Location == null)
            {
                throw new InvalidDataException("Location is a required property for CityInformation and cannot be null");
            }
            else
            {
                this.Location = Location;
            }
            // to ensure "Timezone" is required (not null)
            if (Timezone == null)
            {
                throw new InvalidDataException("Timezone is a required property for CityInformation and cannot be null");
            }
            else
            {
                this.Timezone = Timezone;
            }
            this.State = State;
            this.Currency = Currency;
        }
        
        /// <summary>
        /// The &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/International_Air_Transport_Association_airport_code\&quot;&gt;IATA code&lt;/a&gt; of this city. If you intend to make a flight search from the output of this call, I recommend using this as your input parameter as it generally gives the best results.
        /// </summary>
        /// <value>The &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/International_Air_Transport_Association_airport_code\&quot;&gt;IATA code&lt;/a&gt; of this city. If you intend to make a flight search from the output of this call, I recommend using this as your input parameter as it generally gives the best results.</value>
        [DataMember(Name="code", EmitDefaultValue=false)]
        public string Code { get; set; }

        /// <summary>
        /// The ID of this city in the open-sourced Geonames DB
        /// </summary>
        /// <value>The ID of this city in the open-sourced Geonames DB</value>
        [DataMember(Name="geonames_ID", EmitDefaultValue=false)]
        public string GeonamesID { get; set; }

        /// <summary>
        /// The name of this city, in English
        /// </summary>
        /// <value>The name of this city, in English</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The state code of this city, if applicable
        /// </summary>
        /// <value>The state code of this city, if applicable</value>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public string State { get; set; }

        /// <summary>
        /// The &lt;a href&#x3D;\&quot;http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2\&quot;&gt;ISO 3166-1 alpha-2 country code&lt;/a&gt; in which this city can be found.
        /// </summary>
        /// <value>The &lt;a href&#x3D;\&quot;http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2\&quot;&gt;ISO 3166-1 alpha-2 country code&lt;/a&gt; in which this city can be found.</value>
        [DataMember(Name="country", EmitDefaultValue=false)]
        public string Country { get; set; }

        /// <summary>
        /// This city&#39;s approximate geolocation. The exact center of a city is often not an exact location, so be aware that this might not be exact.
        /// </summary>
        /// <value>This city&#39;s approximate geolocation. The exact center of a city is often not an exact location, so be aware that this might not be exact.</value>
        [DataMember(Name="location", EmitDefaultValue=false)]
        public Geolocation Location { get; set; }

        /// <summary>
        /// The &lt;a href&#x3D;\&quot;http://en.wikipedia.org/wiki/List_of_tz_database_time_zones\&quot;&gt;Olson format&lt;/a&gt; name of the timezone in which this city is located
        /// </summary>
        /// <value>The &lt;a href&#x3D;\&quot;http://en.wikipedia.org/wiki/List_of_tz_database_time_zones\&quot;&gt;Olson format&lt;/a&gt; name of the timezone in which this city is located</value>
        [DataMember(Name="timezone", EmitDefaultValue=false)]
        public string Timezone { get; set; }

        /// <summary>
        /// The ISO-4217 currency code of the official local currency at this location
        /// </summary>
        /// <value>The ISO-4217 currency code of the official local currency at this location</value>
        [DataMember(Name="currency", EmitDefaultValue=false)]
        public string Currency { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CityInformation {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  GeonamesID: ").Append(GeonamesID).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  Timezone: ").Append(Timezone).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CityInformation);
        }

        /// <summary>
        /// Returns true if CityInformation instances are equal
        /// </summary>
        /// <param name="other">Instance of CityInformation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CityInformation other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Code == other.Code ||
                    this.Code != null &&
                    this.Code.Equals(other.Code)
                ) && 
                (
                    this.GeonamesID == other.GeonamesID ||
                    this.GeonamesID != null &&
                    this.GeonamesID.Equals(other.GeonamesID)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.State == other.State ||
                    this.State != null &&
                    this.State.Equals(other.State)
                ) && 
                (
                    this.Country == other.Country ||
                    this.Country != null &&
                    this.Country.Equals(other.Country)
                ) && 
                (
                    this.Location == other.Location ||
                    this.Location != null &&
                    this.Location.Equals(other.Location)
                ) && 
                (
                    this.Timezone == other.Timezone ||
                    this.Timezone != null &&
                    this.Timezone.Equals(other.Timezone)
                ) && 
                (
                    this.Currency == other.Currency ||
                    this.Currency != null &&
                    this.Currency.Equals(other.Currency)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Code != null)
                    hash = hash * 59 + this.Code.GetHashCode();
                if (this.GeonamesID != null)
                    hash = hash * 59 + this.GeonamesID.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.State != null)
                    hash = hash * 59 + this.State.GetHashCode();
                if (this.Country != null)
                    hash = hash * 59 + this.Country.GetHashCode();
                if (this.Location != null)
                    hash = hash * 59 + this.Location.GetHashCode();
                if (this.Timezone != null)
                    hash = hash * 59 + this.Timezone.GetHashCode();
                if (this.Currency != null)
                    hash = hash * 59 + this.Currency.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
