/* 
 * Amadeus Travel Innovation Sandbox
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// TopDestinationsSearchResult
    /// </summary>
    [DataContract]
    public partial class TopDestinationsSearchResult :  IEquatable<TopDestinationsSearchResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TopDestinationsSearchResult" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TopDestinationsSearchResult() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TopDestinationsSearchResult" /> class.
        /// </summary>
        /// <param name="Destination">The &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/International_Air_Transport_Association_airport_code\&quot;&gt;IATA code&lt;/a&gt; of the city or airport to which the traveler may go, from the provided origin (required).</param>
        /// <param name="Flights">Number of flights from origin to destination during the search period provided. This field is deprecated..</param>
        /// <param name="Travelers">Number of passengers from origin to destination during the search period provided (required).</param>
        public TopDestinationsSearchResult(string Destination = default(string), int? Flights = default(int?), int? Travelers = default(int?))
        {
            // to ensure "Destination" is required (not null)
            if (Destination == null)
            {
                throw new InvalidDataException("Destination is a required property for TopDestinationsSearchResult and cannot be null");
            }
            else
            {
                this.Destination = Destination;
            }
            // to ensure "Travelers" is required (not null)
            if (Travelers == null)
            {
                throw new InvalidDataException("Travelers is a required property for TopDestinationsSearchResult and cannot be null");
            }
            else
            {
                this.Travelers = Travelers;
            }
            this.Flights = Flights;
        }
        
        /// <summary>
        /// The &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/International_Air_Transport_Association_airport_code\&quot;&gt;IATA code&lt;/a&gt; of the city or airport to which the traveler may go, from the provided origin
        /// </summary>
        /// <value>The &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/International_Air_Transport_Association_airport_code\&quot;&gt;IATA code&lt;/a&gt; of the city or airport to which the traveler may go, from the provided origin</value>
        [DataMember(Name="destination", EmitDefaultValue=false)]
        public string Destination { get; set; }

        /// <summary>
        /// Number of flights from origin to destination during the search period provided. This field is deprecated.
        /// </summary>
        /// <value>Number of flights from origin to destination during the search period provided. This field is deprecated.</value>
        [DataMember(Name="flights", EmitDefaultValue=false)]
        public int? Flights { get; set; }

        /// <summary>
        /// Number of passengers from origin to destination during the search period provided
        /// </summary>
        /// <value>Number of passengers from origin to destination during the search period provided</value>
        [DataMember(Name="travelers", EmitDefaultValue=false)]
        public int? Travelers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TopDestinationsSearchResult {\n");
            sb.Append("  Destination: ").Append(Destination).Append("\n");
            sb.Append("  Flights: ").Append(Flights).Append("\n");
            sb.Append("  Travelers: ").Append(Travelers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as TopDestinationsSearchResult);
        }

        /// <summary>
        /// Returns true if TopDestinationsSearchResult instances are equal
        /// </summary>
        /// <param name="other">Instance of TopDestinationsSearchResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TopDestinationsSearchResult other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Destination == other.Destination ||
                    this.Destination != null &&
                    this.Destination.Equals(other.Destination)
                ) && 
                (
                    this.Flights == other.Flights ||
                    this.Flights != null &&
                    this.Flights.Equals(other.Flights)
                ) && 
                (
                    this.Travelers == other.Travelers ||
                    this.Travelers != null &&
                    this.Travelers.Equals(other.Travelers)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Destination != null)
                    hash = hash * 59 + this.Destination.GetHashCode();
                if (this.Flights != null)
                    hash = hash * 59 + this.Flights.GetHashCode();
                if (this.Travelers != null)
                    hash = hash * 59 + this.Travelers.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
