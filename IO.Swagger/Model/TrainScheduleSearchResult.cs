/* 
 * Amadeus Travel Innovation Sandbox
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// TrainScheduleSearchResult
    /// </summary>
    [DataContract]
    public partial class TrainScheduleSearchResult :  IEquatable<TrainScheduleSearchResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TrainScheduleSearchResult" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TrainScheduleSearchResult() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TrainScheduleSearchResult" /> class.
        /// </summary>
        /// <param name="OriginStationId">Station ID of the origin station for this search. (required).</param>
        /// <param name="Date">The search date provided in the input. (required).</param>
        /// <param name="Services">Array to describe service to the destinations. (required).</param>
        public TrainScheduleSearchResult(string OriginStationId = default(string), DateTime? Date = default(DateTime?), List<RailService> Services = default(List<RailService>))
        {
            // to ensure "OriginStationId" is required (not null)
            if (OriginStationId == null)
            {
                throw new InvalidDataException("OriginStationId is a required property for TrainScheduleSearchResult and cannot be null");
            }
            else
            {
                this.OriginStationId = OriginStationId;
            }
            // to ensure "Date" is required (not null)
            if (Date == null)
            {
                throw new InvalidDataException("Date is a required property for TrainScheduleSearchResult and cannot be null");
            }
            else
            {
                this.Date = Date;
            }
            // to ensure "Services" is required (not null)
            if (Services == null)
            {
                throw new InvalidDataException("Services is a required property for TrainScheduleSearchResult and cannot be null");
            }
            else
            {
                this.Services = Services;
            }
        }
        
        /// <summary>
        /// Station ID of the origin station for this search.
        /// </summary>
        /// <value>Station ID of the origin station for this search.</value>
        [DataMember(Name="origin_station_id", EmitDefaultValue=false)]
        public string OriginStationId { get; set; }

        /// <summary>
        /// The search date provided in the input.
        /// </summary>
        /// <value>The search date provided in the input.</value>
        [DataMember(Name="date", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? Date { get; set; }

        /// <summary>
        /// Array to describe service to the destinations.
        /// </summary>
        /// <value>Array to describe service to the destinations.</value>
        [DataMember(Name="services", EmitDefaultValue=false)]
        public List<RailService> Services { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TrainScheduleSearchResult {\n");
            sb.Append("  OriginStationId: ").Append(OriginStationId).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Services: ").Append(Services).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as TrainScheduleSearchResult);
        }

        /// <summary>
        /// Returns true if TrainScheduleSearchResult instances are equal
        /// </summary>
        /// <param name="other">Instance of TrainScheduleSearchResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TrainScheduleSearchResult other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.OriginStationId == other.OriginStationId ||
                    this.OriginStationId != null &&
                    this.OriginStationId.Equals(other.OriginStationId)
                ) && 
                (
                    this.Date == other.Date ||
                    this.Date != null &&
                    this.Date.Equals(other.Date)
                ) && 
                (
                    this.Services == other.Services ||
                    this.Services != null &&
                    this.Services.SequenceEqual(other.Services)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.OriginStationId != null)
                    hash = hash * 59 + this.OriginStationId.GetHashCode();
                if (this.Date != null)
                    hash = hash * 59 + this.Date.GetHashCode();
                if (this.Services != null)
                    hash = hash * 59 + this.Services.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
