/* 
 * Amadeus Travel Innovation Sandbox
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// FlightSearchItinerary
    /// </summary>
    [DataContract]
    public partial class FlightSearchItinerary :  IEquatable<FlightSearchItinerary>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FlightSearchItinerary" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FlightSearchItinerary() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FlightSearchItinerary" /> class.
        /// </summary>
        /// <param name="Outbound">The bound container for the flight information for bringing the traveler from the origin airport to the destination airport (required).</param>
        /// <param name="Inbound">The bound container for the flight information for bringing the traveler from the destination airport to the origin airport.</param>
        public FlightSearchItinerary(FlightSearchBound Outbound = default(FlightSearchBound), FlightSearchBound Inbound = default(FlightSearchBound))
        {
            // to ensure "Outbound" is required (not null)
            if (Outbound == null)
            {
                throw new InvalidDataException("Outbound is a required property for FlightSearchItinerary and cannot be null");
            }
            else
            {
                this.Outbound = Outbound;
            }
            this.Inbound = Inbound;
        }
        
        /// <summary>
        /// The bound container for the flight information for bringing the traveler from the origin airport to the destination airport
        /// </summary>
        /// <value>The bound container for the flight information for bringing the traveler from the origin airport to the destination airport</value>
        [DataMember(Name="outbound", EmitDefaultValue=false)]
        public FlightSearchBound Outbound { get; set; }

        /// <summary>
        /// The bound container for the flight information for bringing the traveler from the destination airport to the origin airport
        /// </summary>
        /// <value>The bound container for the flight information for bringing the traveler from the destination airport to the origin airport</value>
        [DataMember(Name="inbound", EmitDefaultValue=false)]
        public FlightSearchBound Inbound { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FlightSearchItinerary {\n");
            sb.Append("  Outbound: ").Append(Outbound).Append("\n");
            sb.Append("  Inbound: ").Append(Inbound).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as FlightSearchItinerary);
        }

        /// <summary>
        /// Returns true if FlightSearchItinerary instances are equal
        /// </summary>
        /// <param name="other">Instance of FlightSearchItinerary to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FlightSearchItinerary other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Outbound == other.Outbound ||
                    this.Outbound != null &&
                    this.Outbound.Equals(other.Outbound)
                ) && 
                (
                    this.Inbound == other.Inbound ||
                    this.Inbound != null &&
                    this.Inbound.Equals(other.Inbound)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Outbound != null)
                    hash = hash * 59 + this.Outbound.GetHashCode();
                if (this.Inbound != null)
                    hash = hash * 59 + this.Inbound.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
