/* 
 * Amadeus Travel Innovation Sandbox
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Result availble grades.
    /// </summary>
    [DataContract]
    public partial class PointOfInterestResultGrades :  IEquatable<PointOfInterestResultGrades>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PointOfInterestResultGrades" /> class.
        /// </summary>
        /// <param name="YapqGrade">Main YAPQ grade. A grade out of 5 for this point, rated against all points in the world and normalized among selected group of points. 5 is best, 0 is worst..</param>
        /// <param name="CityGrade">The ranking of this point of interest compared to other points in this city. 1 is the highest rated..</param>
        public PointOfInterestResultGrades(int? YapqGrade = default(int?), int? CityGrade = default(int?))
        {
            this.YapqGrade = YapqGrade;
            this.CityGrade = CityGrade;
        }
        
        /// <summary>
        /// Main YAPQ grade. A grade out of 5 for this point, rated against all points in the world and normalized among selected group of points. 5 is best, 0 is worst.
        /// </summary>
        /// <value>Main YAPQ grade. A grade out of 5 for this point, rated against all points in the world and normalized among selected group of points. 5 is best, 0 is worst.</value>
        [DataMember(Name="yapq_grade", EmitDefaultValue=false)]
        public int? YapqGrade { get; set; }

        /// <summary>
        /// The ranking of this point of interest compared to other points in this city. 1 is the highest rated.
        /// </summary>
        /// <value>The ranking of this point of interest compared to other points in this city. 1 is the highest rated.</value>
        [DataMember(Name="city_grade", EmitDefaultValue=false)]
        public int? CityGrade { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PointOfInterestResultGrades {\n");
            sb.Append("  YapqGrade: ").Append(YapqGrade).Append("\n");
            sb.Append("  CityGrade: ").Append(CityGrade).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as PointOfInterestResultGrades);
        }

        /// <summary>
        /// Returns true if PointOfInterestResultGrades instances are equal
        /// </summary>
        /// <param name="other">Instance of PointOfInterestResultGrades to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PointOfInterestResultGrades other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.YapqGrade == other.YapqGrade ||
                    this.YapqGrade != null &&
                    this.YapqGrade.Equals(other.YapqGrade)
                ) && 
                (
                    this.CityGrade == other.CityGrade ||
                    this.CityGrade != null &&
                    this.CityGrade.Equals(other.CityGrade)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.YapqGrade != null)
                    hash = hash * 59 + this.YapqGrade.GetHashCode();
                if (this.CityGrade != null)
                    hash = hash * 59 + this.CityGrade.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
