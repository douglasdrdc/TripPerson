/* 
 * Amadeus Travel Innovation Sandbox
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// PointsOfInterestResponse
    /// </summary>
    [DataContract]
    public partial class PointsOfInterestResponse :  IEquatable<PointsOfInterestResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PointsOfInterestResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PointsOfInterestResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PointsOfInterestResponse" /> class.
        /// </summary>
        /// <param name="CurrentCity">CurrentCity.</param>
        /// <param name="PointsOfInterest">PointsOfInterest (required).</param>
        public PointsOfInterestResponse(PointOfInterestCity CurrentCity = default(PointOfInterestCity), List<PointOfInterestResult> PointsOfInterest = default(List<PointOfInterestResult>))
        {
            // to ensure "PointsOfInterest" is required (not null)
            if (PointsOfInterest == null)
            {
                throw new InvalidDataException("PointsOfInterest is a required property for PointsOfInterestResponse and cannot be null");
            }
            else
            {
                this.PointsOfInterest = PointsOfInterest;
            }
            this.CurrentCity = CurrentCity;
        }
        
        /// <summary>
        /// Gets or Sets CurrentCity
        /// </summary>
        [DataMember(Name="current_city", EmitDefaultValue=false)]
        public PointOfInterestCity CurrentCity { get; set; }

        /// <summary>
        /// Gets or Sets PointsOfInterest
        /// </summary>
        [DataMember(Name="points_of_interest", EmitDefaultValue=false)]
        public List<PointOfInterestResult> PointsOfInterest { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PointsOfInterestResponse {\n");
            sb.Append("  CurrentCity: ").Append(CurrentCity).Append("\n");
            sb.Append("  PointsOfInterest: ").Append(PointsOfInterest).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as PointsOfInterestResponse);
        }

        /// <summary>
        /// Returns true if PointsOfInterestResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of PointsOfInterestResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PointsOfInterestResponse other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.CurrentCity == other.CurrentCity ||
                    this.CurrentCity != null &&
                    this.CurrentCity.Equals(other.CurrentCity)
                ) && 
                (
                    this.PointsOfInterest == other.PointsOfInterest ||
                    this.PointsOfInterest != null &&
                    this.PointsOfInterest.SequenceEqual(other.PointsOfInterest)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.CurrentCity != null)
                    hash = hash * 59 + this.CurrentCity.GetHashCode();
                if (this.PointsOfInterest != null)
                    hash = hash * 59 + this.PointsOfInterest.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
